<?php
/**
 * FlowCronResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * FlowCronResponse Class Doc Comment
 *
 * @category Class
 * @description Flow cron response.
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlowCronResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlowCronResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'flow_id' => 'string',
        'cron_id' => 'string',
        'last_run' => '\DateTime',
        'next_run' => '\DateTime',
        'status' => '\FlowHunt\Model\FlowCronStatus',
        'input_text' => 'string',
        'interval_settings' => 'string',
        'variables' => 'array<string,mixed>',
        'cron_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'flow_id' => null,
        'cron_id' => null,
        'last_run' => 'date-time',
        'next_run' => 'date-time',
        'status' => null,
        'input_text' => null,
        'interval_settings' => null,
        'variables' => null,
        'cron_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'flow_id' => false,
        'cron_id' => false,
        'last_run' => true,
        'next_run' => true,
        'status' => false,
        'input_text' => true,
        'interval_settings' => false,
        'variables' => true,
        'cron_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flow_id' => 'flow_id',
        'cron_id' => 'cron_id',
        'last_run' => 'last_run',
        'next_run' => 'next_run',
        'status' => 'status',
        'input_text' => 'input_text',
        'interval_settings' => 'interval_settings',
        'variables' => 'variables',
        'cron_name' => 'cron_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flow_id' => 'setFlowId',
        'cron_id' => 'setCronId',
        'last_run' => 'setLastRun',
        'next_run' => 'setNextRun',
        'status' => 'setStatus',
        'input_text' => 'setInputText',
        'interval_settings' => 'setIntervalSettings',
        'variables' => 'setVariables',
        'cron_name' => 'setCronName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flow_id' => 'getFlowId',
        'cron_id' => 'getCronId',
        'last_run' => 'getLastRun',
        'next_run' => 'getNextRun',
        'status' => 'getStatus',
        'input_text' => 'getInputText',
        'interval_settings' => 'getIntervalSettings',
        'variables' => 'getVariables',
        'cron_name' => 'getCronName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('flow_id', $data ?? [], null);
        $this->setIfExists('cron_id', $data ?? [], null);
        $this->setIfExists('last_run', $data ?? [], null);
        $this->setIfExists('next_run', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('input_text', $data ?? [], null);
        $this->setIfExists('interval_settings', $data ?? [], null);
        $this->setIfExists('variables', $data ?? [], null);
        $this->setIfExists('cron_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['flow_id'] === null) {
            $invalidProperties[] = "'flow_id' can't be null";
        }
        if ($this->container['cron_id'] === null) {
            $invalidProperties[] = "'cron_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['interval_settings'] === null) {
            $invalidProperties[] = "'interval_settings' can't be null";
        }
        if ($this->container['cron_name'] === null) {
            $invalidProperties[] = "'cron_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flow_id
     *
     * @return string
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string $flow_id flow_id
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        if (is_null($flow_id)) {
            throw new \InvalidArgumentException('non-nullable flow_id cannot be null');
        }
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets cron_id
     *
     * @return string
     */
    public function getCronId()
    {
        return $this->container['cron_id'];
    }

    /**
     * Sets cron_id
     *
     * @param string $cron_id cron_id
     *
     * @return self
     */
    public function setCronId($cron_id)
    {
        if (is_null($cron_id)) {
            throw new \InvalidArgumentException('non-nullable cron_id cannot be null');
        }
        $this->container['cron_id'] = $cron_id;

        return $this;
    }

    /**
     * Gets last_run
     *
     * @return \DateTime|null
     */
    public function getLastRun()
    {
        return $this->container['last_run'];
    }

    /**
     * Sets last_run
     *
     * @param \DateTime|null $last_run last_run
     *
     * @return self
     */
    public function setLastRun($last_run)
    {
        if (is_null($last_run)) {
            array_push($this->openAPINullablesSetToNull, 'last_run');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_run', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_run'] = $last_run;

        return $this;
    }

    /**
     * Gets next_run
     *
     * @return \DateTime|null
     */
    public function getNextRun()
    {
        return $this->container['next_run'];
    }

    /**
     * Sets next_run
     *
     * @param \DateTime|null $next_run next_run
     *
     * @return self
     */
    public function setNextRun($next_run)
    {
        if (is_null($next_run)) {
            array_push($this->openAPINullablesSetToNull, 'next_run');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_run', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['next_run'] = $next_run;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \FlowHunt\Model\FlowCronStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \FlowHunt\Model\FlowCronStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets input_text
     *
     * @return string|null
     */
    public function getInputText()
    {
        return $this->container['input_text'];
    }

    /**
     * Sets input_text
     *
     * @param string|null $input_text input_text
     *
     * @return self
     */
    public function setInputText($input_text)
    {
        if (is_null($input_text)) {
            array_push($this->openAPINullablesSetToNull, 'input_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_text'] = $input_text;

        return $this;
    }

    /**
     * Gets interval_settings
     *
     * @return string
     */
    public function getIntervalSettings()
    {
        return $this->container['interval_settings'];
    }

    /**
     * Sets interval_settings
     *
     * @param string $interval_settings interval_settings
     *
     * @return self
     */
    public function setIntervalSettings($interval_settings)
    {
        if (is_null($interval_settings)) {
            throw new \InvalidArgumentException('non-nullable interval_settings cannot be null');
        }
        $this->container['interval_settings'] = $interval_settings;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return array<string,mixed>|null
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param array<string,mixed>|null $variables variables
     *
     * @return self
     */
    public function setVariables($variables)
    {
        if (is_null($variables)) {
            array_push($this->openAPINullablesSetToNull, 'variables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets cron_name
     *
     * @return string
     */
    public function getCronName()
    {
        return $this->container['cron_name'];
    }

    /**
     * Sets cron_name
     *
     * @param string $cron_name cron_name
     *
     * @return self
     */
    public function setCronName($cron_name)
    {
        if (is_null($cron_name)) {
            throw new \InvalidArgumentException('non-nullable cron_name cannot be null');
        }
        $this->container['cron_name'] = $cron_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


