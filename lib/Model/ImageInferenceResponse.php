<?php
/**
 * ImageInferenceResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * ImageInferenceResponse Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImageInferenceResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageInferenceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inference_id' => 'string',
        'image_url_outputs' => 'string[]',
        'date_created' => '\DateTime',
        'prompt' => 'string',
        'styles' => 'string[]',
        'effects' => 'string[]',
        'aspect_ratio' => 'string',
        'ai_model' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inference_id' => 'uuid',
        'image_url_outputs' => null,
        'date_created' => 'date-time',
        'prompt' => null,
        'styles' => null,
        'effects' => null,
        'aspect_ratio' => null,
        'ai_model' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inference_id' => false,
        'image_url_outputs' => false,
        'date_created' => false,
        'prompt' => false,
        'styles' => false,
        'effects' => false,
        'aspect_ratio' => false,
        'ai_model' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inference_id' => 'inference_id',
        'image_url_outputs' => 'image_url_outputs',
        'date_created' => 'date_created',
        'prompt' => 'prompt',
        'styles' => 'styles',
        'effects' => 'effects',
        'aspect_ratio' => 'aspect_ratio',
        'ai_model' => 'ai_model',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inference_id' => 'setInferenceId',
        'image_url_outputs' => 'setImageUrlOutputs',
        'date_created' => 'setDateCreated',
        'prompt' => 'setPrompt',
        'styles' => 'setStyles',
        'effects' => 'setEffects',
        'aspect_ratio' => 'setAspectRatio',
        'ai_model' => 'setAiModel',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inference_id' => 'getInferenceId',
        'image_url_outputs' => 'getImageUrlOutputs',
        'date_created' => 'getDateCreated',
        'prompt' => 'getPrompt',
        'styles' => 'getStyles',
        'effects' => 'getEffects',
        'aspect_ratio' => 'getAspectRatio',
        'ai_model' => 'getAiModel',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('inference_id', $data ?? [], null);
        $this->setIfExists('image_url_outputs', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('prompt', $data ?? [], null);
        $this->setIfExists('styles', $data ?? [], null);
        $this->setIfExists('effects', $data ?? [], null);
        $this->setIfExists('aspect_ratio', $data ?? [], null);
        $this->setIfExists('ai_model', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inference_id'] === null) {
            $invalidProperties[] = "'inference_id' can't be null";
        }
        if ($this->container['image_url_outputs'] === null) {
            $invalidProperties[] = "'image_url_outputs' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['prompt'] === null) {
            $invalidProperties[] = "'prompt' can't be null";
        }
        if ($this->container['styles'] === null) {
            $invalidProperties[] = "'styles' can't be null";
        }
        if ($this->container['effects'] === null) {
            $invalidProperties[] = "'effects' can't be null";
        }
        if ($this->container['aspect_ratio'] === null) {
            $invalidProperties[] = "'aspect_ratio' can't be null";
        }
        if ($this->container['ai_model'] === null) {
            $invalidProperties[] = "'ai_model' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inference_id
     *
     * @return string
     */
    public function getInferenceId()
    {
        return $this->container['inference_id'];
    }

    /**
     * Sets inference_id
     *
     * @param string $inference_id The ID of the inference
     *
     * @return self
     */
    public function setInferenceId($inference_id)
    {
        if (is_null($inference_id)) {
            throw new \InvalidArgumentException('non-nullable inference_id cannot be null');
        }
        $this->container['inference_id'] = $inference_id;

        return $this;
    }

    /**
     * Gets image_url_outputs
     *
     * @return string[]
     */
    public function getImageUrlOutputs()
    {
        return $this->container['image_url_outputs'];
    }

    /**
     * Sets image_url_outputs
     *
     * @param string[] $image_url_outputs The URL of the image
     *
     * @return self
     */
    public function setImageUrlOutputs($image_url_outputs)
    {
        if (is_null($image_url_outputs)) {
            throw new \InvalidArgumentException('non-nullable image_url_outputs cannot be null');
        }
        $this->container['image_url_outputs'] = $image_url_outputs;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created The date the image was created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string $prompt The prompt used for the inference
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        if (is_null($prompt)) {
            throw new \InvalidArgumentException('non-nullable prompt cannot be null');
        }
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return string[]
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param string[] $styles The styles used for the inference
     *
     * @return self
     */
    public function setStyles($styles)
    {
        if (is_null($styles)) {
            throw new \InvalidArgumentException('non-nullable styles cannot be null');
        }
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets effects
     *
     * @return string[]
     */
    public function getEffects()
    {
        return $this->container['effects'];
    }

    /**
     * Sets effects
     *
     * @param string[] $effects The effects used for the inference
     *
     * @return self
     */
    public function setEffects($effects)
    {
        if (is_null($effects)) {
            throw new \InvalidArgumentException('non-nullable effects cannot be null');
        }
        $this->container['effects'] = $effects;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return string
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param string $aspect_ratio The aspect ratio of the output images
     *
     * @return self
     */
    public function setAspectRatio($aspect_ratio)
    {
        if (is_null($aspect_ratio)) {
            throw new \InvalidArgumentException('non-nullable aspect_ratio cannot be null');
        }
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets ai_model
     *
     * @return string
     */
    public function getAiModel()
    {
        return $this->container['ai_model'];
    }

    /**
     * Sets ai_model
     *
     * @param string $ai_model The AI model used for the inference
     *
     * @return self
     */
    public function setAiModel($ai_model)
    {
        if (is_null($ai_model)) {
            throw new \InvalidArgumentException('non-nullable ai_model cannot be null');
        }
        $this->container['ai_model'] = $ai_model;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the inference
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


