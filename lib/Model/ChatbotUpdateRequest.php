<?php
/**
 * ChatbotUpdateRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * ChatbotUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChatbotUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChatbotUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'flow_id' => 'string',
        'status' => '\FlowHunt\Model\ChatbotStatus',
        'url_suffix' => 'string',
        'theme' => 'string',
        'max_window_size' => 'string',
        'msg_rpm' => 'int',
        'msg_ip_rpm' => 'int',
        'chatbot_description' => 'string',
        'show_chatbot_header' => 'bool',
        'chat_bubble_bg_color' => 'string',
        'chat_bubble_icon_color' => 'string',
        'chat_bubble_img_url' => 'string',
        'chatbot_theme' => 'string',
        'chatbot_position' => 'string',
        'message_placeholder' => 'string',
        'chatbot_header_text' => 'string',
        'chatbot_header_logo_url' => 'string',
        'assistant_avatar_image_url' => 'string',
        'remove_branding' => 'bool',
        'chatbot_style' => 'string',
        'session_message_history' => 'bool',
        'chatbot_bubble_size' => 'int',
        'message_header_logo_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'description' => null,
        'flow_id' => 'uuid',
        'status' => null,
        'url_suffix' => null,
        'theme' => null,
        'max_window_size' => null,
        'msg_rpm' => null,
        'msg_ip_rpm' => null,
        'chatbot_description' => null,
        'show_chatbot_header' => null,
        'chat_bubble_bg_color' => null,
        'chat_bubble_icon_color' => null,
        'chat_bubble_img_url' => null,
        'chatbot_theme' => null,
        'chatbot_position' => null,
        'message_placeholder' => null,
        'chatbot_header_text' => null,
        'chatbot_header_logo_url' => null,
        'assistant_avatar_image_url' => null,
        'remove_branding' => null,
        'chatbot_style' => null,
        'session_message_history' => null,
        'chatbot_bubble_size' => null,
        'message_header_logo_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => true,
        'description' => true,
        'flow_id' => true,
        'status' => true,
        'url_suffix' => true,
        'theme' => true,
        'max_window_size' => true,
        'msg_rpm' => true,
        'msg_ip_rpm' => true,
        'chatbot_description' => true,
        'show_chatbot_header' => true,
        'chat_bubble_bg_color' => true,
        'chat_bubble_icon_color' => true,
        'chat_bubble_img_url' => true,
        'chatbot_theme' => true,
        'chatbot_position' => true,
        'message_placeholder' => true,
        'chatbot_header_text' => true,
        'chatbot_header_logo_url' => true,
        'assistant_avatar_image_url' => true,
        'remove_branding' => true,
        'chatbot_style' => true,
        'session_message_history' => true,
        'chatbot_bubble_size' => true,
        'message_header_logo_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'flow_id' => 'flow_id',
        'status' => 'status',
        'url_suffix' => 'url_suffix',
        'theme' => 'theme',
        'max_window_size' => 'max_window_size',
        'msg_rpm' => 'msg_rpm',
        'msg_ip_rpm' => 'msg_ip_rpm',
        'chatbot_description' => 'chatbot_description',
        'show_chatbot_header' => 'show_chatbot_header',
        'chat_bubble_bg_color' => 'chat_bubble_bg_color',
        'chat_bubble_icon_color' => 'chat_bubble_icon_color',
        'chat_bubble_img_url' => 'chat_bubble_img_url',
        'chatbot_theme' => 'chatbot_theme',
        'chatbot_position' => 'chatbot_position',
        'message_placeholder' => 'message_placeholder',
        'chatbot_header_text' => 'chatbot_header_text',
        'chatbot_header_logo_url' => 'chatbot_header_logo_url',
        'assistant_avatar_image_url' => 'assistant_avatar_image_url',
        'remove_branding' => 'remove_branding',
        'chatbot_style' => 'chatbot_style',
        'session_message_history' => 'session_message_history',
        'chatbot_bubble_size' => 'chatbot_bubble_size',
        'message_header_logo_url' => 'message_header_logo_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'flow_id' => 'setFlowId',
        'status' => 'setStatus',
        'url_suffix' => 'setUrlSuffix',
        'theme' => 'setTheme',
        'max_window_size' => 'setMaxWindowSize',
        'msg_rpm' => 'setMsgRpm',
        'msg_ip_rpm' => 'setMsgIpRpm',
        'chatbot_description' => 'setChatbotDescription',
        'show_chatbot_header' => 'setShowChatbotHeader',
        'chat_bubble_bg_color' => 'setChatBubbleBgColor',
        'chat_bubble_icon_color' => 'setChatBubbleIconColor',
        'chat_bubble_img_url' => 'setChatBubbleImgUrl',
        'chatbot_theme' => 'setChatbotTheme',
        'chatbot_position' => 'setChatbotPosition',
        'message_placeholder' => 'setMessagePlaceholder',
        'chatbot_header_text' => 'setChatbotHeaderText',
        'chatbot_header_logo_url' => 'setChatbotHeaderLogoUrl',
        'assistant_avatar_image_url' => 'setAssistantAvatarImageUrl',
        'remove_branding' => 'setRemoveBranding',
        'chatbot_style' => 'setChatbotStyle',
        'session_message_history' => 'setSessionMessageHistory',
        'chatbot_bubble_size' => 'setChatbotBubbleSize',
        'message_header_logo_url' => 'setMessageHeaderLogoUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'flow_id' => 'getFlowId',
        'status' => 'getStatus',
        'url_suffix' => 'getUrlSuffix',
        'theme' => 'getTheme',
        'max_window_size' => 'getMaxWindowSize',
        'msg_rpm' => 'getMsgRpm',
        'msg_ip_rpm' => 'getMsgIpRpm',
        'chatbot_description' => 'getChatbotDescription',
        'show_chatbot_header' => 'getShowChatbotHeader',
        'chat_bubble_bg_color' => 'getChatBubbleBgColor',
        'chat_bubble_icon_color' => 'getChatBubbleIconColor',
        'chat_bubble_img_url' => 'getChatBubbleImgUrl',
        'chatbot_theme' => 'getChatbotTheme',
        'chatbot_position' => 'getChatbotPosition',
        'message_placeholder' => 'getMessagePlaceholder',
        'chatbot_header_text' => 'getChatbotHeaderText',
        'chatbot_header_logo_url' => 'getChatbotHeaderLogoUrl',
        'assistant_avatar_image_url' => 'getAssistantAvatarImageUrl',
        'remove_branding' => 'getRemoveBranding',
        'chatbot_style' => 'getChatbotStyle',
        'session_message_history' => 'getSessionMessageHistory',
        'chatbot_bubble_size' => 'getChatbotBubbleSize',
        'message_header_logo_url' => 'getMessageHeaderLogoUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('flow_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('url_suffix', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], null);
        $this->setIfExists('max_window_size', $data ?? [], null);
        $this->setIfExists('msg_rpm', $data ?? [], null);
        $this->setIfExists('msg_ip_rpm', $data ?? [], null);
        $this->setIfExists('chatbot_description', $data ?? [], null);
        $this->setIfExists('show_chatbot_header', $data ?? [], null);
        $this->setIfExists('chat_bubble_bg_color', $data ?? [], null);
        $this->setIfExists('chat_bubble_icon_color', $data ?? [], null);
        $this->setIfExists('chat_bubble_img_url', $data ?? [], null);
        $this->setIfExists('chatbot_theme', $data ?? [], null);
        $this->setIfExists('chatbot_position', $data ?? [], null);
        $this->setIfExists('message_placeholder', $data ?? [], null);
        $this->setIfExists('chatbot_header_text', $data ?? [], null);
        $this->setIfExists('chatbot_header_logo_url', $data ?? [], null);
        $this->setIfExists('assistant_avatar_image_url', $data ?? [], null);
        $this->setIfExists('remove_branding', $data ?? [], null);
        $this->setIfExists('chatbot_style', $data ?? [], null);
        $this->setIfExists('session_message_history', $data ?? [], null);
        $this->setIfExists('chatbot_bubble_size', $data ?? [], null);
        $this->setIfExists('message_header_logo_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 100)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['url_suffix']) && (mb_strlen($this->container['url_suffix']) > 100)) {
            $invalidProperties[] = "invalid value for 'url_suffix', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['theme']) && (mb_strlen($this->container['theme']) > 1)) {
            $invalidProperties[] = "invalid value for 'theme', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['max_window_size']) && (mb_strlen($this->container['max_window_size']) > 32)) {
            $invalidProperties[] = "invalid value for 'max_window_size', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['chat_bubble_bg_color']) && (mb_strlen($this->container['chat_bubble_bg_color']) > 7)) {
            $invalidProperties[] = "invalid value for 'chat_bubble_bg_color', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['chat_bubble_icon_color']) && (mb_strlen($this->container['chat_bubble_icon_color']) > 7)) {
            $invalidProperties[] = "invalid value for 'chat_bubble_icon_color', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['chatbot_theme']) && (mb_strlen($this->container['chatbot_theme']) > 1)) {
            $invalidProperties[] = "invalid value for 'chatbot_theme', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['chatbot_position']) && (mb_strlen($this->container['chatbot_position']) > 2)) {
            $invalidProperties[] = "invalid value for 'chatbot_position', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['message_placeholder']) && (mb_strlen($this->container['message_placeholder']) > 255)) {
            $invalidProperties[] = "invalid value for 'message_placeholder', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['chatbot_header_text']) && (mb_strlen($this->container['chatbot_header_text']) > 255)) {
            $invalidProperties[] = "invalid value for 'chatbot_header_text', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['chatbot_style']) && (mb_strlen($this->container['chatbot_style']) > 30)) {
            $invalidProperties[] = "invalid value for 'chatbot_style', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title) && (mb_strlen($title) > 100)) {
            throw new \InvalidArgumentException('invalid length for $title when calling ChatbotUpdateRequest., must be smaller than or equal to 100.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets flow_id
     *
     * @return string|null
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string|null $flow_id flow_id
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        if (is_null($flow_id)) {
            array_push($this->openAPINullablesSetToNull, 'flow_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flow_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \FlowHunt\Model\ChatbotStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \FlowHunt\Model\ChatbotStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets url_suffix
     *
     * @return string|null
     */
    public function getUrlSuffix()
    {
        return $this->container['url_suffix'];
    }

    /**
     * Sets url_suffix
     *
     * @param string|null $url_suffix url_suffix
     *
     * @return self
     */
    public function setUrlSuffix($url_suffix)
    {
        if (is_null($url_suffix)) {
            array_push($this->openAPINullablesSetToNull, 'url_suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url_suffix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($url_suffix) && (mb_strlen($url_suffix) > 100)) {
            throw new \InvalidArgumentException('invalid length for $url_suffix when calling ChatbotUpdateRequest., must be smaller than or equal to 100.');
        }

        $this->container['url_suffix'] = $url_suffix;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            array_push($this->openAPINullablesSetToNull, 'theme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('theme', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($theme) && (mb_strlen($theme) > 1)) {
            throw new \InvalidArgumentException('invalid length for $theme when calling ChatbotUpdateRequest., must be smaller than or equal to 1.');
        }

        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets max_window_size
     *
     * @return string|null
     */
    public function getMaxWindowSize()
    {
        return $this->container['max_window_size'];
    }

    /**
     * Sets max_window_size
     *
     * @param string|null $max_window_size max_window_size
     *
     * @return self
     */
    public function setMaxWindowSize($max_window_size)
    {
        if (is_null($max_window_size)) {
            array_push($this->openAPINullablesSetToNull, 'max_window_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_window_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($max_window_size) && (mb_strlen($max_window_size) > 32)) {
            throw new \InvalidArgumentException('invalid length for $max_window_size when calling ChatbotUpdateRequest., must be smaller than or equal to 32.');
        }

        $this->container['max_window_size'] = $max_window_size;

        return $this;
    }

    /**
     * Gets msg_rpm
     *
     * @return int|null
     */
    public function getMsgRpm()
    {
        return $this->container['msg_rpm'];
    }

    /**
     * Sets msg_rpm
     *
     * @param int|null $msg_rpm msg_rpm
     *
     * @return self
     */
    public function setMsgRpm($msg_rpm)
    {
        if (is_null($msg_rpm)) {
            array_push($this->openAPINullablesSetToNull, 'msg_rpm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msg_rpm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['msg_rpm'] = $msg_rpm;

        return $this;
    }

    /**
     * Gets msg_ip_rpm
     *
     * @return int|null
     */
    public function getMsgIpRpm()
    {
        return $this->container['msg_ip_rpm'];
    }

    /**
     * Sets msg_ip_rpm
     *
     * @param int|null $msg_ip_rpm msg_ip_rpm
     *
     * @return self
     */
    public function setMsgIpRpm($msg_ip_rpm)
    {
        if (is_null($msg_ip_rpm)) {
            array_push($this->openAPINullablesSetToNull, 'msg_ip_rpm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msg_ip_rpm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['msg_ip_rpm'] = $msg_ip_rpm;

        return $this;
    }

    /**
     * Gets chatbot_description
     *
     * @return string|null
     */
    public function getChatbotDescription()
    {
        return $this->container['chatbot_description'];
    }

    /**
     * Sets chatbot_description
     *
     * @param string|null $chatbot_description chatbot_description
     *
     * @return self
     */
    public function setChatbotDescription($chatbot_description)
    {
        if (is_null($chatbot_description)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chatbot_description'] = $chatbot_description;

        return $this;
    }

    /**
     * Gets show_chatbot_header
     *
     * @return bool|null
     */
    public function getShowChatbotHeader()
    {
        return $this->container['show_chatbot_header'];
    }

    /**
     * Sets show_chatbot_header
     *
     * @param bool|null $show_chatbot_header show_chatbot_header
     *
     * @return self
     */
    public function setShowChatbotHeader($show_chatbot_header)
    {
        if (is_null($show_chatbot_header)) {
            array_push($this->openAPINullablesSetToNull, 'show_chatbot_header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_chatbot_header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_chatbot_header'] = $show_chatbot_header;

        return $this;
    }

    /**
     * Gets chat_bubble_bg_color
     *
     * @return string|null
     */
    public function getChatBubbleBgColor()
    {
        return $this->container['chat_bubble_bg_color'];
    }

    /**
     * Sets chat_bubble_bg_color
     *
     * @param string|null $chat_bubble_bg_color chat_bubble_bg_color
     *
     * @return self
     */
    public function setChatBubbleBgColor($chat_bubble_bg_color)
    {
        if (is_null($chat_bubble_bg_color)) {
            array_push($this->openAPINullablesSetToNull, 'chat_bubble_bg_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chat_bubble_bg_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chat_bubble_bg_color) && (mb_strlen($chat_bubble_bg_color) > 7)) {
            throw new \InvalidArgumentException('invalid length for $chat_bubble_bg_color when calling ChatbotUpdateRequest., must be smaller than or equal to 7.');
        }

        $this->container['chat_bubble_bg_color'] = $chat_bubble_bg_color;

        return $this;
    }

    /**
     * Gets chat_bubble_icon_color
     *
     * @return string|null
     */
    public function getChatBubbleIconColor()
    {
        return $this->container['chat_bubble_icon_color'];
    }

    /**
     * Sets chat_bubble_icon_color
     *
     * @param string|null $chat_bubble_icon_color chat_bubble_icon_color
     *
     * @return self
     */
    public function setChatBubbleIconColor($chat_bubble_icon_color)
    {
        if (is_null($chat_bubble_icon_color)) {
            array_push($this->openAPINullablesSetToNull, 'chat_bubble_icon_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chat_bubble_icon_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chat_bubble_icon_color) && (mb_strlen($chat_bubble_icon_color) > 7)) {
            throw new \InvalidArgumentException('invalid length for $chat_bubble_icon_color when calling ChatbotUpdateRequest., must be smaller than or equal to 7.');
        }

        $this->container['chat_bubble_icon_color'] = $chat_bubble_icon_color;

        return $this;
    }

    /**
     * Gets chat_bubble_img_url
     *
     * @return string|null
     */
    public function getChatBubbleImgUrl()
    {
        return $this->container['chat_bubble_img_url'];
    }

    /**
     * Sets chat_bubble_img_url
     *
     * @param string|null $chat_bubble_img_url chat_bubble_img_url
     *
     * @return self
     */
    public function setChatBubbleImgUrl($chat_bubble_img_url)
    {
        if (is_null($chat_bubble_img_url)) {
            array_push($this->openAPINullablesSetToNull, 'chat_bubble_img_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chat_bubble_img_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chat_bubble_img_url'] = $chat_bubble_img_url;

        return $this;
    }

    /**
     * Gets chatbot_theme
     *
     * @return string|null
     */
    public function getChatbotTheme()
    {
        return $this->container['chatbot_theme'];
    }

    /**
     * Sets chatbot_theme
     *
     * @param string|null $chatbot_theme chatbot_theme
     *
     * @return self
     */
    public function setChatbotTheme($chatbot_theme)
    {
        if (is_null($chatbot_theme)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_theme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_theme', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chatbot_theme) && (mb_strlen($chatbot_theme) > 1)) {
            throw new \InvalidArgumentException('invalid length for $chatbot_theme when calling ChatbotUpdateRequest., must be smaller than or equal to 1.');
        }

        $this->container['chatbot_theme'] = $chatbot_theme;

        return $this;
    }

    /**
     * Gets chatbot_position
     *
     * @return string|null
     */
    public function getChatbotPosition()
    {
        return $this->container['chatbot_position'];
    }

    /**
     * Sets chatbot_position
     *
     * @param string|null $chatbot_position chatbot_position
     *
     * @return self
     */
    public function setChatbotPosition($chatbot_position)
    {
        if (is_null($chatbot_position)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chatbot_position) && (mb_strlen($chatbot_position) > 2)) {
            throw new \InvalidArgumentException('invalid length for $chatbot_position when calling ChatbotUpdateRequest., must be smaller than or equal to 2.');
        }

        $this->container['chatbot_position'] = $chatbot_position;

        return $this;
    }

    /**
     * Gets message_placeholder
     *
     * @return string|null
     */
    public function getMessagePlaceholder()
    {
        return $this->container['message_placeholder'];
    }

    /**
     * Sets message_placeholder
     *
     * @param string|null $message_placeholder message_placeholder
     *
     * @return self
     */
    public function setMessagePlaceholder($message_placeholder)
    {
        if (is_null($message_placeholder)) {
            array_push($this->openAPINullablesSetToNull, 'message_placeholder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_placeholder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($message_placeholder) && (mb_strlen($message_placeholder) > 255)) {
            throw new \InvalidArgumentException('invalid length for $message_placeholder when calling ChatbotUpdateRequest., must be smaller than or equal to 255.');
        }

        $this->container['message_placeholder'] = $message_placeholder;

        return $this;
    }

    /**
     * Gets chatbot_header_text
     *
     * @return string|null
     */
    public function getChatbotHeaderText()
    {
        return $this->container['chatbot_header_text'];
    }

    /**
     * Sets chatbot_header_text
     *
     * @param string|null $chatbot_header_text chatbot_header_text
     *
     * @return self
     */
    public function setChatbotHeaderText($chatbot_header_text)
    {
        if (is_null($chatbot_header_text)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_header_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_header_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chatbot_header_text) && (mb_strlen($chatbot_header_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $chatbot_header_text when calling ChatbotUpdateRequest., must be smaller than or equal to 255.');
        }

        $this->container['chatbot_header_text'] = $chatbot_header_text;

        return $this;
    }

    /**
     * Gets chatbot_header_logo_url
     *
     * @return string|null
     */
    public function getChatbotHeaderLogoUrl()
    {
        return $this->container['chatbot_header_logo_url'];
    }

    /**
     * Sets chatbot_header_logo_url
     *
     * @param string|null $chatbot_header_logo_url chatbot_header_logo_url
     *
     * @return self
     */
    public function setChatbotHeaderLogoUrl($chatbot_header_logo_url)
    {
        if (is_null($chatbot_header_logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_header_logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_header_logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chatbot_header_logo_url'] = $chatbot_header_logo_url;

        return $this;
    }

    /**
     * Gets assistant_avatar_image_url
     *
     * @return string|null
     */
    public function getAssistantAvatarImageUrl()
    {
        return $this->container['assistant_avatar_image_url'];
    }

    /**
     * Sets assistant_avatar_image_url
     *
     * @param string|null $assistant_avatar_image_url assistant_avatar_image_url
     *
     * @return self
     */
    public function setAssistantAvatarImageUrl($assistant_avatar_image_url)
    {
        if (is_null($assistant_avatar_image_url)) {
            array_push($this->openAPINullablesSetToNull, 'assistant_avatar_image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assistant_avatar_image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assistant_avatar_image_url'] = $assistant_avatar_image_url;

        return $this;
    }

    /**
     * Gets remove_branding
     *
     * @return bool|null
     */
    public function getRemoveBranding()
    {
        return $this->container['remove_branding'];
    }

    /**
     * Sets remove_branding
     *
     * @param bool|null $remove_branding remove_branding
     *
     * @return self
     */
    public function setRemoveBranding($remove_branding)
    {
        if (is_null($remove_branding)) {
            array_push($this->openAPINullablesSetToNull, 'remove_branding');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remove_branding', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remove_branding'] = $remove_branding;

        return $this;
    }

    /**
     * Gets chatbot_style
     *
     * @return string|null
     */
    public function getChatbotStyle()
    {
        return $this->container['chatbot_style'];
    }

    /**
     * Sets chatbot_style
     *
     * @param string|null $chatbot_style chatbot_style
     *
     * @return self
     */
    public function setChatbotStyle($chatbot_style)
    {
        if (is_null($chatbot_style)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_style', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($chatbot_style) && (mb_strlen($chatbot_style) > 30)) {
            throw new \InvalidArgumentException('invalid length for $chatbot_style when calling ChatbotUpdateRequest., must be smaller than or equal to 30.');
        }

        $this->container['chatbot_style'] = $chatbot_style;

        return $this;
    }

    /**
     * Gets session_message_history
     *
     * @return bool|null
     */
    public function getSessionMessageHistory()
    {
        return $this->container['session_message_history'];
    }

    /**
     * Sets session_message_history
     *
     * @param bool|null $session_message_history session_message_history
     *
     * @return self
     */
    public function setSessionMessageHistory($session_message_history)
    {
        if (is_null($session_message_history)) {
            array_push($this->openAPINullablesSetToNull, 'session_message_history');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_message_history', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_message_history'] = $session_message_history;

        return $this;
    }

    /**
     * Gets chatbot_bubble_size
     *
     * @return int|null
     */
    public function getChatbotBubbleSize()
    {
        return $this->container['chatbot_bubble_size'];
    }

    /**
     * Sets chatbot_bubble_size
     *
     * @param int|null $chatbot_bubble_size chatbot_bubble_size
     *
     * @return self
     */
    public function setChatbotBubbleSize($chatbot_bubble_size)
    {
        if (is_null($chatbot_bubble_size)) {
            array_push($this->openAPINullablesSetToNull, 'chatbot_bubble_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatbot_bubble_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chatbot_bubble_size'] = $chatbot_bubble_size;

        return $this;
    }

    /**
     * Gets message_header_logo_url
     *
     * @return string|null
     */
    public function getMessageHeaderLogoUrl()
    {
        return $this->container['message_header_logo_url'];
    }

    /**
     * Sets message_header_logo_url
     *
     * @param string|null $message_header_logo_url message_header_logo_url
     *
     * @return self
     */
    public function setMessageHeaderLogoUrl($message_header_logo_url)
    {
        if (is_null($message_header_logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'message_header_logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_header_logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_header_logo_url'] = $message_header_logo_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


