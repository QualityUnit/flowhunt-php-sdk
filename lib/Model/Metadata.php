<?php
/**
 * Metadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * Metadata Class Doc Comment
 *
 * @category Class
 * @description Metadata
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Metadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_id' => 'string',
        'message' => 'string',
        'tool_name' => 'string',
        'loading_desc' => 'string',
        'icon' => 'string',
        'color' => 'string',
        'detailed_description' => 'string',
        'agent_query' => 'string',
        'tool_response' => 'string',
        'task_name' => 'string',
        'task_input' => 'string',
        'agent' => 'string',
        'task_response' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message_id' => null,
        'message' => null,
        'tool_name' => null,
        'loading_desc' => null,
        'icon' => null,
        'color' => null,
        'detailed_description' => null,
        'agent_query' => null,
        'tool_response' => null,
        'task_name' => null,
        'task_input' => null,
        'agent' => null,
        'task_response' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message_id' => false,
        'message' => false,
        'tool_name' => false,
        'loading_desc' => false,
        'icon' => false,
        'color' => false,
        'detailed_description' => false,
        'agent_query' => false,
        'tool_response' => false,
        'task_name' => false,
        'task_input' => false,
        'agent' => false,
        'task_response' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_id' => 'message_id',
        'message' => 'message',
        'tool_name' => 'tool_name',
        'loading_desc' => 'loading_desc',
        'icon' => 'icon',
        'color' => 'color',
        'detailed_description' => 'detailed_description',
        'agent_query' => 'agent_query',
        'tool_response' => 'tool_response',
        'task_name' => 'task_name',
        'task_input' => 'task_input',
        'agent' => 'agent',
        'task_response' => 'task_response'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_id' => 'setMessageId',
        'message' => 'setMessage',
        'tool_name' => 'setToolName',
        'loading_desc' => 'setLoadingDesc',
        'icon' => 'setIcon',
        'color' => 'setColor',
        'detailed_description' => 'setDetailedDescription',
        'agent_query' => 'setAgentQuery',
        'tool_response' => 'setToolResponse',
        'task_name' => 'setTaskName',
        'task_input' => 'setTaskInput',
        'agent' => 'setAgent',
        'task_response' => 'setTaskResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_id' => 'getMessageId',
        'message' => 'getMessage',
        'tool_name' => 'getToolName',
        'loading_desc' => 'getLoadingDesc',
        'icon' => 'getIcon',
        'color' => 'getColor',
        'detailed_description' => 'getDetailedDescription',
        'agent_query' => 'getAgentQuery',
        'tool_response' => 'getToolResponse',
        'task_name' => 'getTaskName',
        'task_input' => 'getTaskInput',
        'agent' => 'getAgent',
        'task_response' => 'getTaskResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('message_id', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('tool_name', $data ?? [], null);
        $this->setIfExists('loading_desc', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('detailed_description', $data ?? [], null);
        $this->setIfExists('agent_query', $data ?? [], null);
        $this->setIfExists('tool_response', $data ?? [], null);
        $this->setIfExists('task_name', $data ?? [], null);
        $this->setIfExists('task_input', $data ?? [], null);
        $this->setIfExists('agent', $data ?? [], null);
        $this->setIfExists('task_response', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['message_id'] === null) {
            $invalidProperties[] = "'message_id' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['tool_name'] === null) {
            $invalidProperties[] = "'tool_name' can't be null";
        }
        if ($this->container['loading_desc'] === null) {
            $invalidProperties[] = "'loading_desc' can't be null";
        }
        if ($this->container['agent_query'] === null) {
            $invalidProperties[] = "'agent_query' can't be null";
        }
        if ($this->container['tool_response'] === null) {
            $invalidProperties[] = "'tool_response' can't be null";
        }
        if ($this->container['task_name'] === null) {
            $invalidProperties[] = "'task_name' can't be null";
        }
        if ($this->container['task_input'] === null) {
            $invalidProperties[] = "'task_input' can't be null";
        }
        if ($this->container['agent'] === null) {
            $invalidProperties[] = "'agent' can't be null";
        }
        if ($this->container['task_response'] === null) {
            $invalidProperties[] = "'task_response' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_id
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string $message_id Message ID
     *
     * @return self
     */
    public function setMessageId($message_id)
    {
        if (is_null($message_id)) {
            throw new \InvalidArgumentException('non-nullable message_id cannot be null');
        }
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets tool_name
     *
     * @return string
     */
    public function getToolName()
    {
        return $this->container['tool_name'];
    }

    /**
     * Sets tool_name
     *
     * @param string $tool_name Tool name
     *
     * @return self
     */
    public function setToolName($tool_name)
    {
        if (is_null($tool_name)) {
            throw new \InvalidArgumentException('non-nullable tool_name cannot be null');
        }
        $this->container['tool_name'] = $tool_name;

        return $this;
    }

    /**
     * Gets loading_desc
     *
     * @return string
     */
    public function getLoadingDesc()
    {
        return $this->container['loading_desc'];
    }

    /**
     * Sets loading_desc
     *
     * @param string $loading_desc Loading description
     *
     * @return self
     */
    public function setLoadingDesc($loading_desc)
    {
        if (is_null($loading_desc)) {
            throw new \InvalidArgumentException('non-nullable loading_desc cannot be null');
        }
        $this->container['loading_desc'] = $loading_desc;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets detailed_description
     *
     * @return string|null
     */
    public function getDetailedDescription()
    {
        return $this->container['detailed_description'];
    }

    /**
     * Sets detailed_description
     *
     * @param string|null $detailed_description detailed_description
     *
     * @return self
     */
    public function setDetailedDescription($detailed_description)
    {
        if (is_null($detailed_description)) {
            throw new \InvalidArgumentException('non-nullable detailed_description cannot be null');
        }
        $this->container['detailed_description'] = $detailed_description;

        return $this;
    }

    /**
     * Gets agent_query
     *
     * @return string
     */
    public function getAgentQuery()
    {
        return $this->container['agent_query'];
    }

    /**
     * Sets agent_query
     *
     * @param string $agent_query Search query
     *
     * @return self
     */
    public function setAgentQuery($agent_query)
    {
        if (is_null($agent_query)) {
            throw new \InvalidArgumentException('non-nullable agent_query cannot be null');
        }
        $this->container['agent_query'] = $agent_query;

        return $this;
    }

    /**
     * Gets tool_response
     *
     * @return string
     */
    public function getToolResponse()
    {
        return $this->container['tool_response'];
    }

    /**
     * Sets tool_response
     *
     * @param string $tool_response Tool response
     *
     * @return self
     */
    public function setToolResponse($tool_response)
    {
        if (is_null($tool_response)) {
            throw new \InvalidArgumentException('non-nullable tool_response cannot be null');
        }
        $this->container['tool_response'] = $tool_response;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name task_name
     *
     * @return self
     */
    public function setTaskName($task_name)
    {
        if (is_null($task_name)) {
            throw new \InvalidArgumentException('non-nullable task_name cannot be null');
        }
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets task_input
     *
     * @return string
     */
    public function getTaskInput()
    {
        return $this->container['task_input'];
    }

    /**
     * Sets task_input
     *
     * @param string $task_input task_input
     *
     * @return self
     */
    public function setTaskInput($task_input)
    {
        if (is_null($task_input)) {
            throw new \InvalidArgumentException('non-nullable task_input cannot be null');
        }
        $this->container['task_input'] = $task_input;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return string
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param string $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        if (is_null($agent)) {
            throw new \InvalidArgumentException('non-nullable agent cannot be null');
        }
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets task_response
     *
     * @return string
     */
    public function getTaskResponse()
    {
        return $this->container['task_response'];
    }

    /**
     * Sets task_response
     *
     * @param string $task_response task_response
     *
     * @return self
     */
    public function setTaskResponse($task_response)
    {
        if (is_null($task_response)) {
            throw new \InvalidArgumentException('non-nullable task_response cannot be null');
        }
        $this->container['task_response'] = $task_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


