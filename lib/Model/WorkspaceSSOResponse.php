<?php
/**
 * WorkspaceSSOResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * WorkspaceSSOResponse Class Doc Comment
 *
 * @category Class
 * @description Response DTO for workspace SSO settings.
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WorkspaceSSOResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkspaceSSOResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'workspace_id' => 'string',
        'provider' => 'string',
        'domain' => 'string',
        'enabled' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'idp_sso_url' => 'string',
        'idp_metadata_xml' => 'string',
        'idp_entity_id' => 'string',
        'idp_x509_cert' => 'string',
        'login_method' => 'string',
        'jit_provisioning_enabled' => 'bool',
        'email_attribute' => 'string',
        'name_id_format' => 'string',
        'assertion_consumer_service_url' => 'string',
        'first_name_attribute' => 'string',
        'last_name_attribute' => 'string',
        'role_attribute' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'workspace_id' => 'uuid',
        'provider' => null,
        'domain' => null,
        'enabled' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'idp_sso_url' => null,
        'idp_metadata_xml' => null,
        'idp_entity_id' => null,
        'idp_x509_cert' => null,
        'login_method' => null,
        'jit_provisioning_enabled' => null,
        'email_attribute' => null,
        'name_id_format' => null,
        'assertion_consumer_service_url' => null,
        'first_name_attribute' => null,
        'last_name_attribute' => null,
        'role_attribute' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'workspace_id' => false,
        'provider' => false,
        'domain' => true,
        'enabled' => false,
        'created_at' => false,
        'updated_at' => false,
        'idp_sso_url' => true,
        'idp_metadata_xml' => true,
        'idp_entity_id' => true,
        'idp_x509_cert' => true,
        'login_method' => true,
        'jit_provisioning_enabled' => false,
        'email_attribute' => true,
        'name_id_format' => true,
        'assertion_consumer_service_url' => true,
        'first_name_attribute' => true,
        'last_name_attribute' => true,
        'role_attribute' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'workspace_id' => 'workspace_id',
        'provider' => 'provider',
        'domain' => 'domain',
        'enabled' => 'enabled',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'idp_sso_url' => 'idp_sso_url',
        'idp_metadata_xml' => 'idp_metadata_xml',
        'idp_entity_id' => 'idp_entity_id',
        'idp_x509_cert' => 'idp_x509_cert',
        'login_method' => 'login_method',
        'jit_provisioning_enabled' => 'jit_provisioning_enabled',
        'email_attribute' => 'email_attribute',
        'name_id_format' => 'name_id_format',
        'assertion_consumer_service_url' => 'assertion_consumer_service_url',
        'first_name_attribute' => 'first_name_attribute',
        'last_name_attribute' => 'last_name_attribute',
        'role_attribute' => 'role_attribute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'workspace_id' => 'setWorkspaceId',
        'provider' => 'setProvider',
        'domain' => 'setDomain',
        'enabled' => 'setEnabled',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'idp_sso_url' => 'setIdpSsoUrl',
        'idp_metadata_xml' => 'setIdpMetadataXml',
        'idp_entity_id' => 'setIdpEntityId',
        'idp_x509_cert' => 'setIdpX509Cert',
        'login_method' => 'setLoginMethod',
        'jit_provisioning_enabled' => 'setJitProvisioningEnabled',
        'email_attribute' => 'setEmailAttribute',
        'name_id_format' => 'setNameIdFormat',
        'assertion_consumer_service_url' => 'setAssertionConsumerServiceUrl',
        'first_name_attribute' => 'setFirstNameAttribute',
        'last_name_attribute' => 'setLastNameAttribute',
        'role_attribute' => 'setRoleAttribute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'workspace_id' => 'getWorkspaceId',
        'provider' => 'getProvider',
        'domain' => 'getDomain',
        'enabled' => 'getEnabled',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'idp_sso_url' => 'getIdpSsoUrl',
        'idp_metadata_xml' => 'getIdpMetadataXml',
        'idp_entity_id' => 'getIdpEntityId',
        'idp_x509_cert' => 'getIdpX509Cert',
        'login_method' => 'getLoginMethod',
        'jit_provisioning_enabled' => 'getJitProvisioningEnabled',
        'email_attribute' => 'getEmailAttribute',
        'name_id_format' => 'getNameIdFormat',
        'assertion_consumer_service_url' => 'getAssertionConsumerServiceUrl',
        'first_name_attribute' => 'getFirstNameAttribute',
        'last_name_attribute' => 'getLastNameAttribute',
        'role_attribute' => 'getRoleAttribute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('idp_sso_url', $data ?? [], null);
        $this->setIfExists('idp_metadata_xml', $data ?? [], null);
        $this->setIfExists('idp_entity_id', $data ?? [], null);
        $this->setIfExists('idp_x509_cert', $data ?? [], null);
        $this->setIfExists('login_method', $data ?? [], null);
        $this->setIfExists('jit_provisioning_enabled', $data ?? [], false);
        $this->setIfExists('email_attribute', $data ?? [], null);
        $this->setIfExists('name_id_format', $data ?? [], null);
        $this->setIfExists('assertion_consumer_service_url', $data ?? [], null);
        $this->setIfExists('first_name_attribute', $data ?? [], null);
        $this->setIfExists('last_name_attribute', $data ?? [], null);
        $this->setIfExists('role_attribute', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['workspace_id'] === null) {
            $invalidProperties[] = "'workspace_id' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id workspace_id
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            array_push($this->openAPINullablesSetToNull, 'domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets idp_sso_url
     *
     * @return string|null
     */
    public function getIdpSsoUrl()
    {
        return $this->container['idp_sso_url'];
    }

    /**
     * Sets idp_sso_url
     *
     * @param string|null $idp_sso_url idp_sso_url
     *
     * @return self
     */
    public function setIdpSsoUrl($idp_sso_url)
    {
        if (is_null($idp_sso_url)) {
            array_push($this->openAPINullablesSetToNull, 'idp_sso_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_sso_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_sso_url'] = $idp_sso_url;

        return $this;
    }

    /**
     * Gets idp_metadata_xml
     *
     * @return string|null
     */
    public function getIdpMetadataXml()
    {
        return $this->container['idp_metadata_xml'];
    }

    /**
     * Sets idp_metadata_xml
     *
     * @param string|null $idp_metadata_xml idp_metadata_xml
     *
     * @return self
     */
    public function setIdpMetadataXml($idp_metadata_xml)
    {
        if (is_null($idp_metadata_xml)) {
            array_push($this->openAPINullablesSetToNull, 'idp_metadata_xml');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_metadata_xml', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_metadata_xml'] = $idp_metadata_xml;

        return $this;
    }

    /**
     * Gets idp_entity_id
     *
     * @return string|null
     */
    public function getIdpEntityId()
    {
        return $this->container['idp_entity_id'];
    }

    /**
     * Sets idp_entity_id
     *
     * @param string|null $idp_entity_id idp_entity_id
     *
     * @return self
     */
    public function setIdpEntityId($idp_entity_id)
    {
        if (is_null($idp_entity_id)) {
            array_push($this->openAPINullablesSetToNull, 'idp_entity_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_entity_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_entity_id'] = $idp_entity_id;

        return $this;
    }

    /**
     * Gets idp_x509_cert
     *
     * @return string|null
     */
    public function getIdpX509Cert()
    {
        return $this->container['idp_x509_cert'];
    }

    /**
     * Sets idp_x509_cert
     *
     * @param string|null $idp_x509_cert idp_x509_cert
     *
     * @return self
     */
    public function setIdpX509Cert($idp_x509_cert)
    {
        if (is_null($idp_x509_cert)) {
            array_push($this->openAPINullablesSetToNull, 'idp_x509_cert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idp_x509_cert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idp_x509_cert'] = $idp_x509_cert;

        return $this;
    }

    /**
     * Gets login_method
     *
     * @return string|null
     */
    public function getLoginMethod()
    {
        return $this->container['login_method'];
    }

    /**
     * Sets login_method
     *
     * @param string|null $login_method login_method
     *
     * @return self
     */
    public function setLoginMethod($login_method)
    {
        if (is_null($login_method)) {
            array_push($this->openAPINullablesSetToNull, 'login_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('login_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['login_method'] = $login_method;

        return $this;
    }

    /**
     * Gets jit_provisioning_enabled
     *
     * @return bool|null
     */
    public function getJitProvisioningEnabled()
    {
        return $this->container['jit_provisioning_enabled'];
    }

    /**
     * Sets jit_provisioning_enabled
     *
     * @param bool|null $jit_provisioning_enabled jit_provisioning_enabled
     *
     * @return self
     */
    public function setJitProvisioningEnabled($jit_provisioning_enabled)
    {
        if (is_null($jit_provisioning_enabled)) {
            throw new \InvalidArgumentException('non-nullable jit_provisioning_enabled cannot be null');
        }
        $this->container['jit_provisioning_enabled'] = $jit_provisioning_enabled;

        return $this;
    }

    /**
     * Gets email_attribute
     *
     * @return string|null
     */
    public function getEmailAttribute()
    {
        return $this->container['email_attribute'];
    }

    /**
     * Sets email_attribute
     *
     * @param string|null $email_attribute email_attribute
     *
     * @return self
     */
    public function setEmailAttribute($email_attribute)
    {
        if (is_null($email_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'email_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_attribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_attribute'] = $email_attribute;

        return $this;
    }

    /**
     * Gets name_id_format
     *
     * @return string|null
     */
    public function getNameIdFormat()
    {
        return $this->container['name_id_format'];
    }

    /**
     * Sets name_id_format
     *
     * @param string|null $name_id_format name_id_format
     *
     * @return self
     */
    public function setNameIdFormat($name_id_format)
    {
        if (is_null($name_id_format)) {
            array_push($this->openAPINullablesSetToNull, 'name_id_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_id_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name_id_format'] = $name_id_format;

        return $this;
    }

    /**
     * Gets assertion_consumer_service_url
     *
     * @return string|null
     */
    public function getAssertionConsumerServiceUrl()
    {
        return $this->container['assertion_consumer_service_url'];
    }

    /**
     * Sets assertion_consumer_service_url
     *
     * @param string|null $assertion_consumer_service_url assertion_consumer_service_url
     *
     * @return self
     */
    public function setAssertionConsumerServiceUrl($assertion_consumer_service_url)
    {
        if (is_null($assertion_consumer_service_url)) {
            array_push($this->openAPINullablesSetToNull, 'assertion_consumer_service_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assertion_consumer_service_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assertion_consumer_service_url'] = $assertion_consumer_service_url;

        return $this;
    }

    /**
     * Gets first_name_attribute
     *
     * @return string|null
     */
    public function getFirstNameAttribute()
    {
        return $this->container['first_name_attribute'];
    }

    /**
     * Sets first_name_attribute
     *
     * @param string|null $first_name_attribute first_name_attribute
     *
     * @return self
     */
    public function setFirstNameAttribute($first_name_attribute)
    {
        if (is_null($first_name_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'first_name_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name_attribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name_attribute'] = $first_name_attribute;

        return $this;
    }

    /**
     * Gets last_name_attribute
     *
     * @return string|null
     */
    public function getLastNameAttribute()
    {
        return $this->container['last_name_attribute'];
    }

    /**
     * Sets last_name_attribute
     *
     * @param string|null $last_name_attribute last_name_attribute
     *
     * @return self
     */
    public function setLastNameAttribute($last_name_attribute)
    {
        if (is_null($last_name_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'last_name_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name_attribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name_attribute'] = $last_name_attribute;

        return $this;
    }

    /**
     * Gets role_attribute
     *
     * @return string|null
     */
    public function getRoleAttribute()
    {
        return $this->container['role_attribute'];
    }

    /**
     * Sets role_attribute
     *
     * @param string|null $role_attribute role_attribute
     *
     * @return self
     */
    public function setRoleAttribute($role_attribute)
    {
        if (is_null($role_attribute)) {
            array_push($this->openAPINullablesSetToNull, 'role_attribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_attribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_attribute'] = $role_attribute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


