<?php
/**
 * DocumentSearchRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DocumentSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentSearchRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'doc_id' => '\OpenAPI\Client\Model\DocId',
        'cat_id' => '\OpenAPI\Client\Model\CatId',
        'doc_name' => '\OpenAPI\Client\Model\DocName',
        'doc_type' => '\OpenAPI\Client\Model\DocumentSearchRequestDocType',
        'status' => '\OpenAPI\Client\Model\DocumentSearchRequestStatus',
        'user_status' => '\OpenAPI\Client\Model\DocumentSearchRequestUserStatus',
        'updated_at_from' => '\OpenAPI\Client\Model\UpdatedAtFrom',
        'updated_at_to' => '\OpenAPI\Client\Model\UpdatedAtTo',
        'limit' => '\OpenAPI\Client\Model\Limit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'doc_id' => null,
        'cat_id' => null,
        'doc_name' => null,
        'doc_type' => null,
        'status' => null,
        'user_status' => null,
        'updated_at_from' => null,
        'updated_at_to' => null,
        'limit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'doc_id' => false,
        'cat_id' => false,
        'doc_name' => false,
        'doc_type' => false,
        'status' => false,
        'user_status' => false,
        'updated_at_from' => false,
        'updated_at_to' => false,
        'limit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc_id' => 'doc_id',
        'cat_id' => 'cat_id',
        'doc_name' => 'doc_name',
        'doc_type' => 'doc_type',
        'status' => 'status',
        'user_status' => 'user_status',
        'updated_at_from' => 'updated_at_from',
        'updated_at_to' => 'updated_at_to',
        'limit' => 'limit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc_id' => 'setDocId',
        'cat_id' => 'setCatId',
        'doc_name' => 'setDocName',
        'doc_type' => 'setDocType',
        'status' => 'setStatus',
        'user_status' => 'setUserStatus',
        'updated_at_from' => 'setUpdatedAtFrom',
        'updated_at_to' => 'setUpdatedAtTo',
        'limit' => 'setLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc_id' => 'getDocId',
        'cat_id' => 'getCatId',
        'doc_name' => 'getDocName',
        'doc_type' => 'getDocType',
        'status' => 'getStatus',
        'user_status' => 'getUserStatus',
        'updated_at_from' => 'getUpdatedAtFrom',
        'updated_at_to' => 'getUpdatedAtTo',
        'limit' => 'getLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('doc_id', $data ?? [], null);
        $this->setIfExists('cat_id', $data ?? [], null);
        $this->setIfExists('doc_name', $data ?? [], null);
        $this->setIfExists('doc_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('user_status', $data ?? [], null);
        $this->setIfExists('updated_at_from', $data ?? [], null);
        $this->setIfExists('updated_at_to', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc_id
     *
     * @return \OpenAPI\Client\Model\DocId|null
     */
    public function getDocId()
    {
        return $this->container['doc_id'];
    }

    /**
     * Sets doc_id
     *
     * @param \OpenAPI\Client\Model\DocId|null $doc_id doc_id
     *
     * @return self
     */
    public function setDocId($doc_id)
    {
        if (is_null($doc_id)) {
            throw new \InvalidArgumentException('non-nullable doc_id cannot be null');
        }
        $this->container['doc_id'] = $doc_id;

        return $this;
    }

    /**
     * Gets cat_id
     *
     * @return \OpenAPI\Client\Model\CatId|null
     */
    public function getCatId()
    {
        return $this->container['cat_id'];
    }

    /**
     * Sets cat_id
     *
     * @param \OpenAPI\Client\Model\CatId|null $cat_id cat_id
     *
     * @return self
     */
    public function setCatId($cat_id)
    {
        if (is_null($cat_id)) {
            throw new \InvalidArgumentException('non-nullable cat_id cannot be null');
        }
        $this->container['cat_id'] = $cat_id;

        return $this;
    }

    /**
     * Gets doc_name
     *
     * @return \OpenAPI\Client\Model\DocName|null
     */
    public function getDocName()
    {
        return $this->container['doc_name'];
    }

    /**
     * Sets doc_name
     *
     * @param \OpenAPI\Client\Model\DocName|null $doc_name doc_name
     *
     * @return self
     */
    public function setDocName($doc_name)
    {
        if (is_null($doc_name)) {
            throw new \InvalidArgumentException('non-nullable doc_name cannot be null');
        }
        $this->container['doc_name'] = $doc_name;

        return $this;
    }

    /**
     * Gets doc_type
     *
     * @return \OpenAPI\Client\Model\DocumentSearchRequestDocType|null
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     *
     * @param \OpenAPI\Client\Model\DocumentSearchRequestDocType|null $doc_type doc_type
     *
     * @return self
     */
    public function setDocType($doc_type)
    {
        if (is_null($doc_type)) {
            throw new \InvalidArgumentException('non-nullable doc_type cannot be null');
        }
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\DocumentSearchRequestStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\DocumentSearchRequestStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_status
     *
     * @return \OpenAPI\Client\Model\DocumentSearchRequestUserStatus|null
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     *
     * @param \OpenAPI\Client\Model\DocumentSearchRequestUserStatus|null $user_status user_status
     *
     * @return self
     */
    public function setUserStatus($user_status)
    {
        if (is_null($user_status)) {
            throw new \InvalidArgumentException('non-nullable user_status cannot be null');
        }
        $this->container['user_status'] = $user_status;

        return $this;
    }

    /**
     * Gets updated_at_from
     *
     * @return \OpenAPI\Client\Model\UpdatedAtFrom|null
     */
    public function getUpdatedAtFrom()
    {
        return $this->container['updated_at_from'];
    }

    /**
     * Sets updated_at_from
     *
     * @param \OpenAPI\Client\Model\UpdatedAtFrom|null $updated_at_from updated_at_from
     *
     * @return self
     */
    public function setUpdatedAtFrom($updated_at_from)
    {
        if (is_null($updated_at_from)) {
            throw new \InvalidArgumentException('non-nullable updated_at_from cannot be null');
        }
        $this->container['updated_at_from'] = $updated_at_from;

        return $this;
    }

    /**
     * Gets updated_at_to
     *
     * @return \OpenAPI\Client\Model\UpdatedAtTo|null
     */
    public function getUpdatedAtTo()
    {
        return $this->container['updated_at_to'];
    }

    /**
     * Sets updated_at_to
     *
     * @param \OpenAPI\Client\Model\UpdatedAtTo|null $updated_at_to updated_at_to
     *
     * @return self
     */
    public function setUpdatedAtTo($updated_at_to)
    {
        if (is_null($updated_at_to)) {
            throw new \InvalidArgumentException('non-nullable updated_at_to cannot be null');
        }
        $this->container['updated_at_to'] = $updated_at_to;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return \OpenAPI\Client\Model\Limit|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param \OpenAPI\Client\Model\Limit|null $limit limit
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }
        $this->container['limit'] = $limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


