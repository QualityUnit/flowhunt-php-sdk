<?php
/**
 * PlanListItemResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * PlanListItemResponse Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlanListItemResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlanListItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_id' => 'string',
        'price_id' => 'string',
        'currency' => 'string',
        'amount_monthly' => 'int',
        'amount_yearly' => 'int',
        'recurring' => 'bool',
        'name' => 'string',
        'description' => 'string',
        'popular' => 'bool',
        'monthly_credits' => 'int',
        'features' => '\FlowHunt\Model\FeatureResponse[]',
        'subscription_plan' => '\FlowHunt\Model\SubscriptionPlan',
        'self_hosted' => 'bool',
        'addon' => 'bool',
        'addon_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_id' => null,
        'price_id' => null,
        'currency' => null,
        'amount_monthly' => null,
        'amount_yearly' => null,
        'recurring' => null,
        'name' => null,
        'description' => null,
        'popular' => null,
        'monthly_credits' => null,
        'features' => null,
        'subscription_plan' => null,
        'self_hosted' => null,
        'addon' => null,
        'addon_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_id' => false,
        'price_id' => false,
        'currency' => false,
        'amount_monthly' => false,
        'amount_yearly' => true,
        'recurring' => false,
        'name' => false,
        'description' => false,
        'popular' => false,
        'monthly_credits' => false,
        'features' => false,
        'subscription_plan' => true,
        'self_hosted' => true,
        'addon' => true,
        'addon_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'product_id',
        'price_id' => 'price_id',
        'currency' => 'currency',
        'amount_monthly' => 'amount_monthly',
        'amount_yearly' => 'amount_yearly',
        'recurring' => 'recurring',
        'name' => 'name',
        'description' => 'description',
        'popular' => 'popular',
        'monthly_credits' => 'monthly_credits',
        'features' => 'features',
        'subscription_plan' => 'subscription_plan',
        'self_hosted' => 'self_hosted',
        'addon' => 'addon',
        'addon_type' => 'addon_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'price_id' => 'setPriceId',
        'currency' => 'setCurrency',
        'amount_monthly' => 'setAmountMonthly',
        'amount_yearly' => 'setAmountYearly',
        'recurring' => 'setRecurring',
        'name' => 'setName',
        'description' => 'setDescription',
        'popular' => 'setPopular',
        'monthly_credits' => 'setMonthlyCredits',
        'features' => 'setFeatures',
        'subscription_plan' => 'setSubscriptionPlan',
        'self_hosted' => 'setSelfHosted',
        'addon' => 'setAddon',
        'addon_type' => 'setAddonType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'price_id' => 'getPriceId',
        'currency' => 'getCurrency',
        'amount_monthly' => 'getAmountMonthly',
        'amount_yearly' => 'getAmountYearly',
        'recurring' => 'getRecurring',
        'name' => 'getName',
        'description' => 'getDescription',
        'popular' => 'getPopular',
        'monthly_credits' => 'getMonthlyCredits',
        'features' => 'getFeatures',
        'subscription_plan' => 'getSubscriptionPlan',
        'self_hosted' => 'getSelfHosted',
        'addon' => 'getAddon',
        'addon_type' => 'getAddonType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('price_id', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('amount_monthly', $data ?? [], null);
        $this->setIfExists('amount_yearly', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('popular', $data ?? [], null);
        $this->setIfExists('monthly_credits', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('subscription_plan', $data ?? [], null);
        $this->setIfExists('self_hosted', $data ?? [], null);
        $this->setIfExists('addon', $data ?? [], null);
        $this->setIfExists('addon_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['price_id'] === null) {
            $invalidProperties[] = "'price_id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['amount_monthly'] === null) {
            $invalidProperties[] = "'amount_monthly' can't be null";
        }
        if ($this->container['recurring'] === null) {
            $invalidProperties[] = "'recurring' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['popular'] === null) {
            $invalidProperties[] = "'popular' can't be null";
        }
        if ($this->container['monthly_credits'] === null) {
            $invalidProperties[] = "'monthly_credits' can't be null";
        }
        if ($this->container['features'] === null) {
            $invalidProperties[] = "'features' can't be null";
        }
        if ($this->container['subscription_plan'] === null) {
            $invalidProperties[] = "'subscription_plan' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets price_id
     *
     * @return string
     */
    public function getPriceId()
    {
        return $this->container['price_id'];
    }

    /**
     * Sets price_id
     *
     * @param string $price_id price_id
     *
     * @return self
     */
    public function setPriceId($price_id)
    {
        if (is_null($price_id)) {
            throw new \InvalidArgumentException('non-nullable price_id cannot be null');
        }
        $this->container['price_id'] = $price_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount_monthly
     *
     * @return int
     */
    public function getAmountMonthly()
    {
        return $this->container['amount_monthly'];
    }

    /**
     * Sets amount_monthly
     *
     * @param int $amount_monthly amount_monthly
     *
     * @return self
     */
    public function setAmountMonthly($amount_monthly)
    {
        if (is_null($amount_monthly)) {
            throw new \InvalidArgumentException('non-nullable amount_monthly cannot be null');
        }
        $this->container['amount_monthly'] = $amount_monthly;

        return $this;
    }

    /**
     * Gets amount_yearly
     *
     * @return int|null
     */
    public function getAmountYearly()
    {
        return $this->container['amount_yearly'];
    }

    /**
     * Sets amount_yearly
     *
     * @param int|null $amount_yearly amount_yearly
     *
     * @return self
     */
    public function setAmountYearly($amount_yearly)
    {
        if (is_null($amount_yearly)) {
            array_push($this->openAPINullablesSetToNull, 'amount_yearly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_yearly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_yearly'] = $amount_yearly;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring recurring
     *
     * @return self
     */
    public function setRecurring($recurring)
    {
        if (is_null($recurring)) {
            throw new \InvalidArgumentException('non-nullable recurring cannot be null');
        }
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets popular
     *
     * @return bool
     */
    public function getPopular()
    {
        return $this->container['popular'];
    }

    /**
     * Sets popular
     *
     * @param bool $popular popular
     *
     * @return self
     */
    public function setPopular($popular)
    {
        if (is_null($popular)) {
            throw new \InvalidArgumentException('non-nullable popular cannot be null');
        }
        $this->container['popular'] = $popular;

        return $this;
    }

    /**
     * Gets monthly_credits
     *
     * @return int
     */
    public function getMonthlyCredits()
    {
        return $this->container['monthly_credits'];
    }

    /**
     * Sets monthly_credits
     *
     * @param int $monthly_credits monthly_credits
     *
     * @return self
     */
    public function setMonthlyCredits($monthly_credits)
    {
        if (is_null($monthly_credits)) {
            throw new \InvalidArgumentException('non-nullable monthly_credits cannot be null');
        }
        $this->container['monthly_credits'] = $monthly_credits;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \FlowHunt\Model\FeatureResponse[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \FlowHunt\Model\FeatureResponse[] $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets subscription_plan
     *
     * @return \FlowHunt\Model\SubscriptionPlan
     */
    public function getSubscriptionPlan()
    {
        return $this->container['subscription_plan'];
    }

    /**
     * Sets subscription_plan
     *
     * @param \FlowHunt\Model\SubscriptionPlan $subscription_plan subscription_plan
     *
     * @return self
     */
    public function setSubscriptionPlan($subscription_plan)
    {
        if (is_null($subscription_plan)) {
            array_push($this->openAPINullablesSetToNull, 'subscription_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscription_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subscription_plan'] = $subscription_plan;

        return $this;
    }

    /**
     * Gets self_hosted
     *
     * @return bool|null
     */
    public function getSelfHosted()
    {
        return $this->container['self_hosted'];
    }

    /**
     * Sets self_hosted
     *
     * @param bool|null $self_hosted self_hosted
     *
     * @return self
     */
    public function setSelfHosted($self_hosted)
    {
        if (is_null($self_hosted)) {
            array_push($this->openAPINullablesSetToNull, 'self_hosted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('self_hosted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['self_hosted'] = $self_hosted;

        return $this;
    }

    /**
     * Gets addon
     *
     * @return bool|null
     */
    public function getAddon()
    {
        return $this->container['addon'];
    }

    /**
     * Sets addon
     *
     * @param bool|null $addon addon
     *
     * @return self
     */
    public function setAddon($addon)
    {
        if (is_null($addon)) {
            array_push($this->openAPINullablesSetToNull, 'addon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addon'] = $addon;

        return $this;
    }

    /**
     * Gets addon_type
     *
     * @return string|null
     */
    public function getAddonType()
    {
        return $this->container['addon_type'];
    }

    /**
     * Sets addon_type
     *
     * @param string|null $addon_type addon_type
     *
     * @return self
     */
    public function setAddonType($addon_type)
    {
        if (is_null($addon_type)) {
            array_push($this->openAPINullablesSetToNull, 'addon_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addon_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addon_type'] = $addon_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


