<?php
/**
 * FlowAssistantUpdateComponentMetadata
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * FlowAssistantUpdateComponentMetadata Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlowAssistantUpdateComponentMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlowAssistantUpdateComponentMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_id' => 'string',
        'component_id' => 'string',
        'component_type' => 'string',
        'component_display_name' => 'string',
        'component_icon' => 'string',
        'parameter_values' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_id' => null,
        'component_id' => null,
        'component_type' => null,
        'component_display_name' => null,
        'component_icon' => null,
        'parameter_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action_id' => false,
        'component_id' => false,
        'component_type' => false,
        'component_display_name' => true,
        'component_icon' => true,
        'parameter_values' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_id' => 'action_id',
        'component_id' => 'component_id',
        'component_type' => 'component_type',
        'component_display_name' => 'component_display_name',
        'component_icon' => 'component_icon',
        'parameter_values' => 'parameter_values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_id' => 'setActionId',
        'component_id' => 'setComponentId',
        'component_type' => 'setComponentType',
        'component_display_name' => 'setComponentDisplayName',
        'component_icon' => 'setComponentIcon',
        'parameter_values' => 'setParameterValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_id' => 'getActionId',
        'component_id' => 'getComponentId',
        'component_type' => 'getComponentType',
        'component_display_name' => 'getComponentDisplayName',
        'component_icon' => 'getComponentIcon',
        'parameter_values' => 'getParameterValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('action_id', $data ?? [], null);
        $this->setIfExists('component_id', $data ?? [], null);
        $this->setIfExists('component_type', $data ?? [], null);
        $this->setIfExists('component_display_name', $data ?? [], null);
        $this->setIfExists('component_icon', $data ?? [], null);
        $this->setIfExists('parameter_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action_id'] === null) {
            $invalidProperties[] = "'action_id' can't be null";
        }
        if ($this->container['component_id'] === null) {
            $invalidProperties[] = "'component_id' can't be null";
        }
        if ($this->container['component_type'] === null) {
            $invalidProperties[] = "'component_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_id
     *
     * @return string
     */
    public function getActionId()
    {
        return $this->container['action_id'];
    }

    /**
     * Sets action_id
     *
     * @param string $action_id Action ID
     *
     * @return self
     */
    public function setActionId($action_id)
    {
        if (is_null($action_id)) {
            throw new \InvalidArgumentException('non-nullable action_id cannot be null');
        }
        $this->container['action_id'] = $action_id;

        return $this;
    }

    /**
     * Gets component_id
     *
     * @return string
     */
    public function getComponentId()
    {
        return $this->container['component_id'];
    }

    /**
     * Sets component_id
     *
     * @param string $component_id Component ID
     *
     * @return self
     */
    public function setComponentId($component_id)
    {
        if (is_null($component_id)) {
            throw new \InvalidArgumentException('non-nullable component_id cannot be null');
        }
        $this->container['component_id'] = $component_id;

        return $this;
    }

    /**
     * Gets component_type
     *
     * @return string
     */
    public function getComponentType()
    {
        return $this->container['component_type'];
    }

    /**
     * Sets component_type
     *
     * @param string $component_type Component name
     *
     * @return self
     */
    public function setComponentType($component_type)
    {
        if (is_null($component_type)) {
            throw new \InvalidArgumentException('non-nullable component_type cannot be null');
        }
        $this->container['component_type'] = $component_type;

        return $this;
    }

    /**
     * Gets component_display_name
     *
     * @return string|null
     */
    public function getComponentDisplayName()
    {
        return $this->container['component_display_name'];
    }

    /**
     * Sets component_display_name
     *
     * @param string|null $component_display_name component_display_name
     *
     * @return self
     */
    public function setComponentDisplayName($component_display_name)
    {
        if (is_null($component_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'component_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('component_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['component_display_name'] = $component_display_name;

        return $this;
    }

    /**
     * Gets component_icon
     *
     * @return string|null
     */
    public function getComponentIcon()
    {
        return $this->container['component_icon'];
    }

    /**
     * Sets component_icon
     *
     * @param string|null $component_icon component_icon
     *
     * @return self
     */
    public function setComponentIcon($component_icon)
    {
        if (is_null($component_icon)) {
            array_push($this->openAPINullablesSetToNull, 'component_icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('component_icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['component_icon'] = $component_icon;

        return $this;
    }

    /**
     * Gets parameter_values
     *
     * @return array<string,mixed>|null
     */
    public function getParameterValues()
    {
        return $this->container['parameter_values'];
    }

    /**
     * Sets parameter_values
     *
     * @param array<string,mixed>|null $parameter_values parameter_values
     *
     * @return self
     */
    public function setParameterValues($parameter_values)
    {
        if (is_null($parameter_values)) {
            array_push($this->openAPINullablesSetToNull, 'parameter_values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parameter_values', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parameter_values'] = $parameter_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


