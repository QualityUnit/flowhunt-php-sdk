<?php
/**
 * ImageInferenceRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Model;

use \ArrayAccess;
use \FlowHunt\ObjectSerializer;

/**
 * ImageInferenceRequest Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImageInferenceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageInferenceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_model' => '\FlowHunt\Model\BaseFoundationModel',
        'prompt' => 'string',
        'image_fts' => 'string[]',
        'number_of_outputs' => 'int',
        'aspect_ratio' => '\FlowHunt\Model\AspecRatio',
        'steps' => 'int',
        'guidance_scale' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_model' => null,
        'prompt' => null,
        'image_fts' => 'uuid',
        'number_of_outputs' => null,
        'aspect_ratio' => null,
        'steps' => null,
        'guidance_scale' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_model' => false,
        'prompt' => false,
        'image_fts' => false,
        'number_of_outputs' => false,
        'aspect_ratio' => false,
        'steps' => false,
        'guidance_scale' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_model' => 'base_model',
        'prompt' => 'prompt',
        'image_fts' => 'image_fts',
        'number_of_outputs' => 'number_of_outputs',
        'aspect_ratio' => 'aspect_ratio',
        'steps' => 'steps',
        'guidance_scale' => 'guidance_scale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_model' => 'setBaseModel',
        'prompt' => 'setPrompt',
        'image_fts' => 'setImageFts',
        'number_of_outputs' => 'setNumberOfOutputs',
        'aspect_ratio' => 'setAspectRatio',
        'steps' => 'setSteps',
        'guidance_scale' => 'setGuidanceScale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_model' => 'getBaseModel',
        'prompt' => 'getPrompt',
        'image_fts' => 'getImageFts',
        'number_of_outputs' => 'getNumberOfOutputs',
        'aspect_ratio' => 'getAspectRatio',
        'steps' => 'getSteps',
        'guidance_scale' => 'getGuidanceScale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_model', $data ?? [], null);
        $this->setIfExists('prompt', $data ?? [], null);
        $this->setIfExists('image_fts', $data ?? [], null);
        $this->setIfExists('number_of_outputs', $data ?? [], 1);
        $this->setIfExists('aspect_ratio', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], 28);
        $this->setIfExists('guidance_scale', $data ?? [], 3.5);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['base_model'] === null) {
            $invalidProperties[] = "'base_model' can't be null";
        }
        if ($this->container['prompt'] === null) {
            $invalidProperties[] = "'prompt' can't be null";
        }
        if ($this->container['image_fts'] === null) {
            $invalidProperties[] = "'image_fts' can't be null";
        }
        if (!is_null($this->container['guidance_scale']) && ($this->container['guidance_scale'] > 10.0)) {
            $invalidProperties[] = "invalid value for 'guidance_scale', must be smaller than or equal to 10.0.";
        }

        if (!is_null($this->container['guidance_scale']) && ($this->container['guidance_scale'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'guidance_scale', must be bigger than or equal to 0.0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_model
     *
     * @return \FlowHunt\Model\BaseFoundationModel
     */
    public function getBaseModel()
    {
        return $this->container['base_model'];
    }

    /**
     * Sets base_model
     *
     * @param \FlowHunt\Model\BaseFoundationModel $base_model The base model to use for inference
     *
     * @return self
     */
    public function setBaseModel($base_model)
    {
        if (is_null($base_model)) {
            throw new \InvalidArgumentException('non-nullable base_model cannot be null');
        }
        $this->container['base_model'] = $base_model;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string $prompt The prompt to use for inference
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        if (is_null($prompt)) {
            throw new \InvalidArgumentException('non-nullable prompt cannot be null');
        }
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets image_fts
     *
     * @return string[]
     */
    public function getImageFts()
    {
        return $this->container['image_fts'];
    }

    /**
     * Sets image_fts
     *
     * @param string[] $image_fts The list of image FTs to use for inference
     *
     * @return self
     */
    public function setImageFts($image_fts)
    {
        if (is_null($image_fts)) {
            throw new \InvalidArgumentException('non-nullable image_fts cannot be null');
        }
        $this->container['image_fts'] = $image_fts;

        return $this;
    }

    /**
     * Gets number_of_outputs
     *
     * @return int|null
     */
    public function getNumberOfOutputs()
    {
        return $this->container['number_of_outputs'];
    }

    /**
     * Sets number_of_outputs
     *
     * @param int|null $number_of_outputs The number of outputs to generate
     *
     * @return self
     */
    public function setNumberOfOutputs($number_of_outputs)
    {
        if (is_null($number_of_outputs)) {
            throw new \InvalidArgumentException('non-nullable number_of_outputs cannot be null');
        }
        $this->container['number_of_outputs'] = $number_of_outputs;

        return $this;
    }

    /**
     * Gets aspect_ratio
     *
     * @return \FlowHunt\Model\AspecRatio|null
     */
    public function getAspectRatio()
    {
        return $this->container['aspect_ratio'];
    }

    /**
     * Sets aspect_ratio
     *
     * @param \FlowHunt\Model\AspecRatio|null $aspect_ratio The aspect ratio of the output images
     *
     * @return self
     */
    public function setAspectRatio($aspect_ratio)
    {
        if (is_null($aspect_ratio)) {
            throw new \InvalidArgumentException('non-nullable aspect_ratio cannot be null');
        }
        $this->container['aspect_ratio'] = $aspect_ratio;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return int|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param int|null $steps The number of steps to take in the inference process
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            throw new \InvalidArgumentException('non-nullable steps cannot be null');
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets guidance_scale
     *
     * @return float|null
     */
    public function getGuidanceScale()
    {
        return $this->container['guidance_scale'];
    }

    /**
     * Sets guidance_scale
     *
     * @param float|null $guidance_scale The guidance scale to use in the inference process
     *
     * @return self
     */
    public function setGuidanceScale($guidance_scale)
    {
        if (is_null($guidance_scale)) {
            throw new \InvalidArgumentException('non-nullable guidance_scale cannot be null');
        }

        if (($guidance_scale > 10.0)) {
            throw new \InvalidArgumentException('invalid value for $guidance_scale when calling ImageInferenceRequest., must be smaller than or equal to 10.0.');
        }
        if (($guidance_scale < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $guidance_scale when calling ImageInferenceRequest., must be bigger than or equal to 0.0.');
        }

        $this->container['guidance_scale'] = $guidance_scale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


