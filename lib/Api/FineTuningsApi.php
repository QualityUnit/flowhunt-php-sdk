<?php
/**
 * FineTuningsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FlowHunt\ApiException;
use FlowHunt\Configuration;
use FlowHunt\FormDataProcessor;
use FlowHunt\HeaderSelector;
use FlowHunt\ObjectSerializer;

/**
 * FineTuningsApi Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FineTuningsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createImageFt' => [
            'application/json',
        ],
        'deleteFileFt' => [
            'application/json',
        ],
        'deleteImageFt' => [
            'application/json',
        ],
        'generateImagePrompt' => [
            'application/json',
        ],
        'generateImages' => [
            'application/json',
        ],
        'getFileFt' => [
            'application/json',
        ],
        'getInferenceResults' => [
            'application/json',
        ],
        'handleReplicateWebhook' => [
            'application/json',
        ],
        'searchImageFts' => [
            'application/json',
        ],
        'searchInferenceHistory' => [
            'application/json',
        ],
        'updateImageFt' => [
            'application/json',
        ],
        'uploadImageFt' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createImageFt
     *
     * Create Image Ft
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTCreateRequest $image_ft_create_request image_ft_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImageFTResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function createImageFt($workspace_id, $image_ft_create_request, string $contentType = self::contentTypes['createImageFt'][0])
    {
        list($response) = $this->createImageFtWithHttpInfo($workspace_id, $image_ft_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createImageFtWithHttpInfo
     *
     * Create Image Ft
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTCreateRequest $image_ft_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImageFTResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createImageFtWithHttpInfo($workspace_id, $image_ft_create_request, string $contentType = self::contentTypes['createImageFt'][0])
    {
        $request = $this->createImageFtRequest($workspace_id, $image_ft_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImageFTResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImageFTResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImageFTResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createImageFtAsync
     *
     * Create Image Ft
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTCreateRequest $image_ft_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImageFtAsync($workspace_id, $image_ft_create_request, string $contentType = self::contentTypes['createImageFt'][0])
    {
        return $this->createImageFtAsyncWithHttpInfo($workspace_id, $image_ft_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createImageFtAsyncWithHttpInfo
     *
     * Create Image Ft
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTCreateRequest $image_ft_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImageFtAsyncWithHttpInfo($workspace_id, $image_ft_create_request, string $contentType = self::contentTypes['createImageFt'][0])
    {
        $returnType = '\FlowHunt\Model\ImageFTResponse';
        $request = $this->createImageFtRequest($workspace_id, $image_ft_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createImageFt'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTCreateRequest $image_ft_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createImageFtRequest($workspace_id, $image_ft_create_request, string $contentType = self::contentTypes['createImageFt'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling createImageFt'
            );
        }

        // verify the required parameter 'image_ft_create_request' is set
        if ($image_ft_create_request === null || (is_array($image_ft_create_request) && count($image_ft_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_ft_create_request when calling createImageFt'
            );
        }


        $resourcePath = '/v2/photo_ai/images/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($image_ft_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($image_ft_create_request));
            } else {
                $httpBody = $image_ft_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFileFt
     *
     * Delete File Ft
     *
     * @param  string $file_key file_key (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\FlowHunt\Model\HTTPValidationError
     */
    public function deleteFileFt($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['deleteFileFt'][0])
    {
        list($response) = $this->deleteFileFtWithHttpInfo($file_key, $workspace_id, $file_type, $contentType);
        return $response;
    }

    /**
     * Operation deleteFileFtWithHttpInfo
     *
     * Delete File Ft
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileFtWithHttpInfo($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['deleteFileFt'][0])
    {
        $request = $this->deleteFileFtRequest($file_key, $workspace_id, $file_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteFileFtAsync
     *
     * Delete File Ft
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileFtAsync($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['deleteFileFt'][0])
    {
        return $this->deleteFileFtAsyncWithHttpInfo($file_key, $workspace_id, $file_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileFtAsyncWithHttpInfo
     *
     * Delete File Ft
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileFtAsyncWithHttpInfo($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['deleteFileFt'][0])
    {
        $returnType = 'mixed';
        $request = $this->deleteFileFtRequest($file_key, $workspace_id, $file_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFileFt'
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFileFtRequest($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['deleteFileFt'][0])
    {

        // verify the required parameter 'file_key' is set
        if ($file_key === null || (is_array($file_key) && count($file_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_key when calling deleteFileFt'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling deleteFileFt'
            );
        }

        // verify the required parameter 'file_type' is set
        if ($file_type === null || (is_array($file_type) && count($file_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_type when calling deleteFileFt'
            );
        }


        $resourcePath = '/v2/photo_ai/files/{file_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_type,
            'file_type', // param base name
            'InferenceFileType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($file_key !== null) {
            $resourcePath = str_replace(
                '{' . 'file_key' . '}',
                ObjectSerializer::toPathValue($file_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteImageFt
     *
     * Delete Image Ft
     *
     * @param  string $ft_id ft_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function deleteImageFt($ft_id, $workspace_id, string $contentType = self::contentTypes['deleteImageFt'][0])
    {
        list($response) = $this->deleteImageFtWithHttpInfo($ft_id, $workspace_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteImageFtWithHttpInfo
     *
     * Delete Image Ft
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteImageFtWithHttpInfo($ft_id, $workspace_id, string $contentType = self::contentTypes['deleteImageFt'][0])
    {
        $request = $this->deleteImageFtRequest($ft_id, $workspace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteImageFtAsync
     *
     * Delete Image Ft
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImageFtAsync($ft_id, $workspace_id, string $contentType = self::contentTypes['deleteImageFt'][0])
    {
        return $this->deleteImageFtAsyncWithHttpInfo($ft_id, $workspace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteImageFtAsyncWithHttpInfo
     *
     * Delete Image Ft
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImageFtAsyncWithHttpInfo($ft_id, $workspace_id, string $contentType = self::contentTypes['deleteImageFt'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->deleteImageFtRequest($ft_id, $workspace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteImageFt'
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteImageFtRequest($ft_id, $workspace_id, string $contentType = self::contentTypes['deleteImageFt'][0])
    {

        // verify the required parameter 'ft_id' is set
        if ($ft_id === null || (is_array($ft_id) && count($ft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ft_id when calling deleteImageFt'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling deleteImageFt'
            );
        }


        $resourcePath = '/v2/photo_ai/images/{ft_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($ft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ft_id' . '}',
                ObjectSerializer::toPathValue($ft_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateImagePrompt
     *
     * Generate Image Prompt
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\ImagePromptGenerationRequest $image_prompt_generation_request image_prompt_generation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImagePrompt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImagePromptResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function generateImagePrompt($workspace_id, $image_prompt_generation_request, string $contentType = self::contentTypes['generateImagePrompt'][0])
    {
        list($response) = $this->generateImagePromptWithHttpInfo($workspace_id, $image_prompt_generation_request, $contentType);
        return $response;
    }

    /**
     * Operation generateImagePromptWithHttpInfo
     *
     * Generate Image Prompt
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImagePromptGenerationRequest $image_prompt_generation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImagePrompt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImagePromptResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateImagePromptWithHttpInfo($workspace_id, $image_prompt_generation_request, string $contentType = self::contentTypes['generateImagePrompt'][0])
    {
        $request = $this->generateImagePromptRequest($workspace_id, $image_prompt_generation_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImagePromptResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImagePromptResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImagePromptResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation generateImagePromptAsync
     *
     * Generate Image Prompt
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImagePromptGenerationRequest $image_prompt_generation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImagePrompt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateImagePromptAsync($workspace_id, $image_prompt_generation_request, string $contentType = self::contentTypes['generateImagePrompt'][0])
    {
        return $this->generateImagePromptAsyncWithHttpInfo($workspace_id, $image_prompt_generation_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateImagePromptAsyncWithHttpInfo
     *
     * Generate Image Prompt
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImagePromptGenerationRequest $image_prompt_generation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImagePrompt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateImagePromptAsyncWithHttpInfo($workspace_id, $image_prompt_generation_request, string $contentType = self::contentTypes['generateImagePrompt'][0])
    {
        $returnType = '\FlowHunt\Model\ImagePromptResponse';
        $request = $this->generateImagePromptRequest($workspace_id, $image_prompt_generation_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateImagePrompt'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImagePromptGenerationRequest $image_prompt_generation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImagePrompt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateImagePromptRequest($workspace_id, $image_prompt_generation_request, string $contentType = self::contentTypes['generateImagePrompt'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling generateImagePrompt'
            );
        }

        // verify the required parameter 'image_prompt_generation_request' is set
        if ($image_prompt_generation_request === null || (is_array($image_prompt_generation_request) && count($image_prompt_generation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_prompt_generation_request when calling generateImagePrompt'
            );
        }


        $resourcePath = '/v2/photo_ai/inference/images/generate-prompt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($image_prompt_generation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($image_prompt_generation_request));
            } else {
                $httpBody = $image_prompt_generation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateImages
     *
     * Generate Images
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\ImageInferenceRequest $image_inference_request image_inference_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImages'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImageInferenceScheduleResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function generateImages($workspace_id, $image_inference_request, string $contentType = self::contentTypes['generateImages'][0])
    {
        list($response) = $this->generateImagesWithHttpInfo($workspace_id, $image_inference_request, $contentType);
        return $response;
    }

    /**
     * Operation generateImagesWithHttpInfo
     *
     * Generate Images
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageInferenceRequest $image_inference_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImages'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImageInferenceScheduleResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateImagesWithHttpInfo($workspace_id, $image_inference_request, string $contentType = self::contentTypes['generateImages'][0])
    {
        $request = $this->generateImagesRequest($workspace_id, $image_inference_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImageInferenceScheduleResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImageInferenceScheduleResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImageInferenceScheduleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation generateImagesAsync
     *
     * Generate Images
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageInferenceRequest $image_inference_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateImagesAsync($workspace_id, $image_inference_request, string $contentType = self::contentTypes['generateImages'][0])
    {
        return $this->generateImagesAsyncWithHttpInfo($workspace_id, $image_inference_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateImagesAsyncWithHttpInfo
     *
     * Generate Images
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageInferenceRequest $image_inference_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateImagesAsyncWithHttpInfo($workspace_id, $image_inference_request, string $contentType = self::contentTypes['generateImages'][0])
    {
        $returnType = '\FlowHunt\Model\ImageInferenceScheduleResponse';
        $request = $this->generateImagesRequest($workspace_id, $image_inference_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateImages'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageInferenceRequest $image_inference_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateImagesRequest($workspace_id, $image_inference_request, string $contentType = self::contentTypes['generateImages'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling generateImages'
            );
        }

        // verify the required parameter 'image_inference_request' is set
        if ($image_inference_request === null || (is_array($image_inference_request) && count($image_inference_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_inference_request when calling generateImages'
            );
        }


        $resourcePath = '/v2/photo_ai/inference/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($image_inference_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($image_inference_request));
            } else {
                $httpBody = $image_inference_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFileFt
     *
     * Get File Ft
     *
     * @param  string $file_key file_key (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\FlowHunt\Model\HTTPValidationError
     */
    public function getFileFt($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['getFileFt'][0])
    {
        list($response) = $this->getFileFtWithHttpInfo($file_key, $workspace_id, $file_type, $contentType);
        return $response;
    }

    /**
     * Operation getFileFtWithHttpInfo
     *
     * Get File Ft
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileFtWithHttpInfo($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['getFileFt'][0])
    {
        $request = $this->getFileFtRequest($file_key, $workspace_id, $file_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFileFtAsync
     *
     * Get File Ft
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileFtAsync($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['getFileFt'][0])
    {
        return $this->getFileFtAsyncWithHttpInfo($file_key, $workspace_id, $file_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFileFtAsyncWithHttpInfo
     *
     * Get File Ft
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileFtAsyncWithHttpInfo($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['getFileFt'][0])
    {
        $returnType = 'mixed';
        $request = $this->getFileFtRequest($file_key, $workspace_id, $file_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFileFt'
     *
     * @param  string $file_key (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceFileType $file_type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFileFtRequest($file_key, $workspace_id, $file_type, string $contentType = self::contentTypes['getFileFt'][0])
    {

        // verify the required parameter 'file_key' is set
        if ($file_key === null || (is_array($file_key) && count($file_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_key when calling getFileFt'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling getFileFt'
            );
        }

        // verify the required parameter 'file_type' is set
        if ($file_type === null || (is_array($file_type) && count($file_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_type when calling getFileFt'
            );
        }


        $resourcePath = '/v2/photo_ai/files/{file_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file_type,
            'file_type', // param base name
            'InferenceFileType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($file_key !== null) {
            $resourcePath = str_replace(
                '{' . 'file_key' . '}',
                ObjectSerializer::toPathValue($file_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInferenceResults
     *
     * Get Inference Results
     *
     * @param  string $inference_id inference_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInferenceResults'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImageInferenceResultResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function getInferenceResults($inference_id, $workspace_id, string $contentType = self::contentTypes['getInferenceResults'][0])
    {
        list($response) = $this->getInferenceResultsWithHttpInfo($inference_id, $workspace_id, $contentType);
        return $response;
    }

    /**
     * Operation getInferenceResultsWithHttpInfo
     *
     * Get Inference Results
     *
     * @param  string $inference_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInferenceResults'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImageInferenceResultResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInferenceResultsWithHttpInfo($inference_id, $workspace_id, string $contentType = self::contentTypes['getInferenceResults'][0])
    {
        $request = $this->getInferenceResultsRequest($inference_id, $workspace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImageInferenceResultResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImageInferenceResultResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImageInferenceResultResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getInferenceResultsAsync
     *
     * Get Inference Results
     *
     * @param  string $inference_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInferenceResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInferenceResultsAsync($inference_id, $workspace_id, string $contentType = self::contentTypes['getInferenceResults'][0])
    {
        return $this->getInferenceResultsAsyncWithHttpInfo($inference_id, $workspace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInferenceResultsAsyncWithHttpInfo
     *
     * Get Inference Results
     *
     * @param  string $inference_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInferenceResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInferenceResultsAsyncWithHttpInfo($inference_id, $workspace_id, string $contentType = self::contentTypes['getInferenceResults'][0])
    {
        $returnType = '\FlowHunt\Model\ImageInferenceResultResponse';
        $request = $this->getInferenceResultsRequest($inference_id, $workspace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInferenceResults'
     *
     * @param  string $inference_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInferenceResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInferenceResultsRequest($inference_id, $workspace_id, string $contentType = self::contentTypes['getInferenceResults'][0])
    {

        // verify the required parameter 'inference_id' is set
        if ($inference_id === null || (is_array($inference_id) && count($inference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inference_id when calling getInferenceResults'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling getInferenceResults'
            );
        }


        $resourcePath = '/v2/photo_ai/inference/results/{inference_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($inference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inference_id' . '}',
                ObjectSerializer::toPathValue($inference_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleReplicateWebhook
     *
     * Handle Replicate Webhook
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  string $ft_id ft_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['handleReplicateWebhook'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function handleReplicateWebhook($workspace_id, $ft_id, string $contentType = self::contentTypes['handleReplicateWebhook'][0])
    {
        list($response) = $this->handleReplicateWebhookWithHttpInfo($workspace_id, $ft_id, $contentType);
        return $response;
    }

    /**
     * Operation handleReplicateWebhookWithHttpInfo
     *
     * Handle Replicate Webhook
     *
     * @param  string $workspace_id (required)
     * @param  string $ft_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['handleReplicateWebhook'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleReplicateWebhookWithHttpInfo($workspace_id, $ft_id, string $contentType = self::contentTypes['handleReplicateWebhook'][0])
    {
        $request = $this->handleReplicateWebhookRequest($workspace_id, $ft_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation handleReplicateWebhookAsync
     *
     * Handle Replicate Webhook
     *
     * @param  string $workspace_id (required)
     * @param  string $ft_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['handleReplicateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleReplicateWebhookAsync($workspace_id, $ft_id, string $contentType = self::contentTypes['handleReplicateWebhook'][0])
    {
        return $this->handleReplicateWebhookAsyncWithHttpInfo($workspace_id, $ft_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleReplicateWebhookAsyncWithHttpInfo
     *
     * Handle Replicate Webhook
     *
     * @param  string $workspace_id (required)
     * @param  string $ft_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['handleReplicateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleReplicateWebhookAsyncWithHttpInfo($workspace_id, $ft_id, string $contentType = self::contentTypes['handleReplicateWebhook'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->handleReplicateWebhookRequest($workspace_id, $ft_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleReplicateWebhook'
     *
     * @param  string $workspace_id (required)
     * @param  string $ft_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['handleReplicateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function handleReplicateWebhookRequest($workspace_id, $ft_id, string $contentType = self::contentTypes['handleReplicateWebhook'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling handleReplicateWebhook'
            );
        }

        // verify the required parameter 'ft_id' is set
        if ($ft_id === null || (is_array($ft_id) && count($ft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ft_id when calling handleReplicateWebhook'
            );
        }


        $resourcePath = '/v2/photo_ai/webhooks/replicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ft_id,
            'ft_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchImageFts
     *
     * Search Image Fts
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTSearchRequest $image_ft_search_request image_ft_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchImageFts'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImageFTResponse[]|\FlowHunt\Model\HTTPValidationError
     */
    public function searchImageFts($workspace_id, $image_ft_search_request, string $contentType = self::contentTypes['searchImageFts'][0])
    {
        list($response) = $this->searchImageFtsWithHttpInfo($workspace_id, $image_ft_search_request, $contentType);
        return $response;
    }

    /**
     * Operation searchImageFtsWithHttpInfo
     *
     * Search Image Fts
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTSearchRequest $image_ft_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchImageFts'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImageFTResponse[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchImageFtsWithHttpInfo($workspace_id, $image_ft_search_request, string $contentType = self::contentTypes['searchImageFts'][0])
    {
        $request = $this->searchImageFtsRequest($workspace_id, $image_ft_search_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImageFTResponse[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImageFTResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImageFTResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation searchImageFtsAsync
     *
     * Search Image Fts
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTSearchRequest $image_ft_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchImageFts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchImageFtsAsync($workspace_id, $image_ft_search_request, string $contentType = self::contentTypes['searchImageFts'][0])
    {
        return $this->searchImageFtsAsyncWithHttpInfo($workspace_id, $image_ft_search_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchImageFtsAsyncWithHttpInfo
     *
     * Search Image Fts
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTSearchRequest $image_ft_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchImageFts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchImageFtsAsyncWithHttpInfo($workspace_id, $image_ft_search_request, string $contentType = self::contentTypes['searchImageFts'][0])
    {
        $returnType = '\FlowHunt\Model\ImageFTResponse[]';
        $request = $this->searchImageFtsRequest($workspace_id, $image_ft_search_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchImageFts'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTSearchRequest $image_ft_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchImageFts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchImageFtsRequest($workspace_id, $image_ft_search_request, string $contentType = self::contentTypes['searchImageFts'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling searchImageFts'
            );
        }

        // verify the required parameter 'image_ft_search_request' is set
        if ($image_ft_search_request === null || (is_array($image_ft_search_request) && count($image_ft_search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_ft_search_request when calling searchImageFts'
            );
        }


        $resourcePath = '/v2/photo_ai/images/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($image_ft_search_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($image_ft_search_request));
            } else {
                $httpBody = $image_ft_search_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchInferenceHistory
     *
     * Search Inference History
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\InferenceHistorySearchRequest $inference_history_search_request inference_history_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInferenceHistory'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImageInferenceScrollResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function searchInferenceHistory($workspace_id, $inference_history_search_request, string $contentType = self::contentTypes['searchInferenceHistory'][0])
    {
        list($response) = $this->searchInferenceHistoryWithHttpInfo($workspace_id, $inference_history_search_request, $contentType);
        return $response;
    }

    /**
     * Operation searchInferenceHistoryWithHttpInfo
     *
     * Search Inference History
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceHistorySearchRequest $inference_history_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInferenceHistory'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImageInferenceScrollResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchInferenceHistoryWithHttpInfo($workspace_id, $inference_history_search_request, string $contentType = self::contentTypes['searchInferenceHistory'][0])
    {
        $request = $this->searchInferenceHistoryRequest($workspace_id, $inference_history_search_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImageInferenceScrollResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImageInferenceScrollResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImageInferenceScrollResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation searchInferenceHistoryAsync
     *
     * Search Inference History
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceHistorySearchRequest $inference_history_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInferenceHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInferenceHistoryAsync($workspace_id, $inference_history_search_request, string $contentType = self::contentTypes['searchInferenceHistory'][0])
    {
        return $this->searchInferenceHistoryAsyncWithHttpInfo($workspace_id, $inference_history_search_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchInferenceHistoryAsyncWithHttpInfo
     *
     * Search Inference History
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceHistorySearchRequest $inference_history_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInferenceHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInferenceHistoryAsyncWithHttpInfo($workspace_id, $inference_history_search_request, string $contentType = self::contentTypes['searchInferenceHistory'][0])
    {
        $returnType = '\FlowHunt\Model\ImageInferenceScrollResponse';
        $request = $this->searchInferenceHistoryRequest($workspace_id, $inference_history_search_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchInferenceHistory'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\InferenceHistorySearchRequest $inference_history_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInferenceHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchInferenceHistoryRequest($workspace_id, $inference_history_search_request, string $contentType = self::contentTypes['searchInferenceHistory'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling searchInferenceHistory'
            );
        }

        // verify the required parameter 'inference_history_search_request' is set
        if ($inference_history_search_request === null || (is_array($inference_history_search_request) && count($inference_history_search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inference_history_search_request when calling searchInferenceHistory'
            );
        }


        $resourcePath = '/v2/photo_ai/inference/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($inference_history_search_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($inference_history_search_request));
            } else {
                $httpBody = $inference_history_search_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateImageFt
     *
     * Update Image Ft
     *
     * @param  string $ft_id ft_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTUpdateRequest $image_ft_update_request image_ft_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\ImageFTResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function updateImageFt($ft_id, $workspace_id, $image_ft_update_request, string $contentType = self::contentTypes['updateImageFt'][0])
    {
        list($response) = $this->updateImageFtWithHttpInfo($ft_id, $workspace_id, $image_ft_update_request, $contentType);
        return $response;
    }

    /**
     * Operation updateImageFtWithHttpInfo
     *
     * Update Image Ft
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTUpdateRequest $image_ft_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\ImageFTResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateImageFtWithHttpInfo($ft_id, $workspace_id, $image_ft_update_request, string $contentType = self::contentTypes['updateImageFt'][0])
    {
        $request = $this->updateImageFtRequest($ft_id, $workspace_id, $image_ft_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\ImageFTResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\ImageFTResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\ImageFTResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateImageFtAsync
     *
     * Update Image Ft
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTUpdateRequest $image_ft_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImageFtAsync($ft_id, $workspace_id, $image_ft_update_request, string $contentType = self::contentTypes['updateImageFt'][0])
    {
        return $this->updateImageFtAsyncWithHttpInfo($ft_id, $workspace_id, $image_ft_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateImageFtAsyncWithHttpInfo
     *
     * Update Image Ft
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTUpdateRequest $image_ft_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImageFtAsyncWithHttpInfo($ft_id, $workspace_id, $image_ft_update_request, string $contentType = self::contentTypes['updateImageFt'][0])
    {
        $returnType = '\FlowHunt\Model\ImageFTResponse';
        $request = $this->updateImageFtRequest($ft_id, $workspace_id, $image_ft_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateImageFt'
     *
     * @param  string $ft_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\ImageFTUpdateRequest $image_ft_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateImageFtRequest($ft_id, $workspace_id, $image_ft_update_request, string $contentType = self::contentTypes['updateImageFt'][0])
    {

        // verify the required parameter 'ft_id' is set
        if ($ft_id === null || (is_array($ft_id) && count($ft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ft_id when calling updateImageFt'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling updateImageFt'
            );
        }

        // verify the required parameter 'image_ft_update_request' is set
        if ($image_ft_update_request === null || (is_array($image_ft_update_request) && count($image_ft_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_ft_update_request when calling updateImageFt'
            );
        }


        $resourcePath = '/v2/photo_ai/images/{ft_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($ft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ft_id' . '}',
                ObjectSerializer::toPathValue($ft_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($image_ft_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($image_ft_update_request));
            } else {
                $httpBody = $image_ft_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadImageFt
     *
     * Upload Image Ft
     *
     * @param  \FlowHunt\Model\FTType $ft_type ft_type (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \SplFileObject $file file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\FileUploadResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function uploadImageFt($ft_type, $workspace_id, $file, string $contentType = self::contentTypes['uploadImageFt'][0])
    {
        list($response) = $this->uploadImageFtWithHttpInfo($ft_type, $workspace_id, $file, $contentType);
        return $response;
    }

    /**
     * Operation uploadImageFtWithHttpInfo
     *
     * Upload Image Ft
     *
     * @param  \FlowHunt\Model\FTType $ft_type (required)
     * @param  string $workspace_id (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadImageFt'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\FileUploadResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadImageFtWithHttpInfo($ft_type, $workspace_id, $file, string $contentType = self::contentTypes['uploadImageFt'][0])
    {
        $request = $this->uploadImageFtRequest($ft_type, $workspace_id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\FileUploadResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\FileUploadResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\FileUploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation uploadImageFtAsync
     *
     * Upload Image Ft
     *
     * @param  \FlowHunt\Model\FTType $ft_type (required)
     * @param  string $workspace_id (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadImageFtAsync($ft_type, $workspace_id, $file, string $contentType = self::contentTypes['uploadImageFt'][0])
    {
        return $this->uploadImageFtAsyncWithHttpInfo($ft_type, $workspace_id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadImageFtAsyncWithHttpInfo
     *
     * Upload Image Ft
     *
     * @param  \FlowHunt\Model\FTType $ft_type (required)
     * @param  string $workspace_id (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadImageFtAsyncWithHttpInfo($ft_type, $workspace_id, $file, string $contentType = self::contentTypes['uploadImageFt'][0])
    {
        $returnType = '\FlowHunt\Model\FileUploadResponse';
        $request = $this->uploadImageFtRequest($ft_type, $workspace_id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadImageFt'
     *
     * @param  \FlowHunt\Model\FTType $ft_type (required)
     * @param  string $workspace_id (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadImageFt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadImageFtRequest($ft_type, $workspace_id, $file, string $contentType = self::contentTypes['uploadImageFt'][0])
    {

        // verify the required parameter 'ft_type' is set
        if ($ft_type === null || (is_array($ft_type) && count($ft_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ft_type when calling uploadImageFt'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling uploadImageFt'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadImageFt'
            );
        }


        $resourcePath = '/v2/photo_ai/files/{ft_type}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($ft_type !== null) {
            $resourcePath = str_replace(
                '{' . 'ft_type' . '}',
                ObjectSerializer::toPathValue($ft_type),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'file' => $file,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
