<?php
/**
 * SERPApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FlowHunt\ApiException;
use FlowHunt\Configuration;
use FlowHunt\FormDataProcessor;
use FlowHunt\HeaderSelector;
use FlowHunt\ObjectSerializer;

/**
 * SERPApi Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SERPApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchClusterQuery' => [
            'application/json',
        ],
        'serpClusterAddQueries' => [
            'application/json',
        ],
        'serpClusterDeleteCampaign' => [
            'application/json',
        ],
        'serpClusterDeleteCustomer' => [
            'application/json',
        ],
        'serpClusterDeleteGroup' => [
            'application/json',
        ],
        'serpClusterDeleteGroupQueries' => [
            'application/json',
        ],
        'serpClusterGetGraphNodes' => [
            'application/json',
        ],
        'serpClusterGetMatchingGroupsToQuery' => [
            'application/json',
        ],
        'serpClusterGetRelatedKeywordsToQuery' => [
            'application/json',
        ],
        'serpClusterSplitToSubClusters' => [
            'application/json',
        ],
        'serpSearch' => [
            'application/json',
        ],
        'serpVolumes' => [
            'application/json',
        ],
        'serpVolumesPingback' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchClusterQuery
     *
     * Search Cluster Query
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSearchRequest $serp_cluster_group_search_request serp_cluster_group_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchClusterQuery'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\SerpClusterKeywordResponse[]|\FlowHunt\Model\HTTPValidationError
     */
    public function searchClusterQuery($workspace_id, $serp_cluster_group_search_request, string $contentType = self::contentTypes['searchClusterQuery'][0])
    {
        list($response) = $this->searchClusterQueryWithHttpInfo($workspace_id, $serp_cluster_group_search_request, $contentType);
        return $response;
    }

    /**
     * Operation searchClusterQueryWithHttpInfo
     *
     * Search Cluster Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSearchRequest $serp_cluster_group_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchClusterQuery'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\SerpClusterKeywordResponse[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchClusterQueryWithHttpInfo($workspace_id, $serp_cluster_group_search_request, string $contentType = self::contentTypes['searchClusterQuery'][0])
    {
        $request = $this->searchClusterQueryRequest($workspace_id, $serp_cluster_group_search_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\SerpClusterKeywordResponse[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\SerpClusterKeywordResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\SerpClusterKeywordResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation searchClusterQueryAsync
     *
     * Search Cluster Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSearchRequest $serp_cluster_group_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchClusterQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchClusterQueryAsync($workspace_id, $serp_cluster_group_search_request, string $contentType = self::contentTypes['searchClusterQuery'][0])
    {
        return $this->searchClusterQueryAsyncWithHttpInfo($workspace_id, $serp_cluster_group_search_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchClusterQueryAsyncWithHttpInfo
     *
     * Search Cluster Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSearchRequest $serp_cluster_group_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchClusterQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchClusterQueryAsyncWithHttpInfo($workspace_id, $serp_cluster_group_search_request, string $contentType = self::contentTypes['searchClusterQuery'][0])
    {
        $returnType = '\FlowHunt\Model\SerpClusterKeywordResponse[]';
        $request = $this->searchClusterQueryRequest($workspace_id, $serp_cluster_group_search_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchClusterQuery'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSearchRequest $serp_cluster_group_search_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchClusterQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchClusterQueryRequest($workspace_id, $serp_cluster_group_search_request, string $contentType = self::contentTypes['searchClusterQuery'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling searchClusterQuery'
            );
        }

        // verify the required parameter 'serp_cluster_group_search_request' is set
        if ($serp_cluster_group_search_request === null || (is_array($serp_cluster_group_search_request) && count($serp_cluster_group_search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_cluster_group_search_request when calling searchClusterQuery'
            );
        }


        $resourcePath = '/v2/serp/clusters/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_cluster_group_search_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_cluster_group_search_request));
            } else {
                $httpBody = $serp_cluster_group_search_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterAddQueries
     *
     * Serp Cluster Add Queries
     *
     * @param  string $customer_id customer_id (required)
     * @param  string $campaign_id campaign_id (required)
     * @param  string $group_id group_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterAddQueryRequests $serp_cluster_add_query_requests serp_cluster_add_query_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterAddQueries'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterAddQueries($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, string $contentType = self::contentTypes['serpClusterAddQueries'][0])
    {
        list($response) = $this->serpClusterAddQueriesWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterAddQueriesWithHttpInfo
     *
     * Serp Cluster Add Queries
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterAddQueryRequests $serp_cluster_add_query_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterAddQueries'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterAddQueriesWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, string $contentType = self::contentTypes['serpClusterAddQueries'][0])
    {
        $request = $this->serpClusterAddQueriesRequest($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterAddQueriesAsync
     *
     * Serp Cluster Add Queries
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterAddQueryRequests $serp_cluster_add_query_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterAddQueries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterAddQueriesAsync($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, string $contentType = self::contentTypes['serpClusterAddQueries'][0])
    {
        return $this->serpClusterAddQueriesAsyncWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterAddQueriesAsyncWithHttpInfo
     *
     * Serp Cluster Add Queries
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterAddQueryRequests $serp_cluster_add_query_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterAddQueries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterAddQueriesAsyncWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, string $contentType = self::contentTypes['serpClusterAddQueries'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->serpClusterAddQueriesRequest($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterAddQueries'
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterAddQueryRequests $serp_cluster_add_query_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterAddQueries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterAddQueriesRequest($customer_id, $campaign_id, $group_id, $workspace_id, $serp_cluster_add_query_requests, string $contentType = self::contentTypes['serpClusterAddQueries'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling serpClusterAddQueries'
            );
        }

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling serpClusterAddQueries'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling serpClusterAddQueries'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterAddQueries'
            );
        }

        // verify the required parameter 'serp_cluster_add_query_requests' is set
        if ($serp_cluster_add_query_requests === null || (is_array($serp_cluster_add_query_requests) && count($serp_cluster_add_query_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_cluster_add_query_requests when calling serpClusterAddQueries'
            );
        }


        $resourcePath = '/v2/serp/clusters/{customer_id}/{campaign_id}/{group_id}/add_keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_cluster_add_query_requests)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_cluster_add_query_requests));
            } else {
                $httpBody = $serp_cluster_add_query_requests;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterDeleteCampaign
     *
     * Serp Cluster Delete Campaign
     *
     * @param  string $customer_id customer_id (required)
     * @param  string $campaign_id campaign_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCampaign'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterDeleteCampaign($customer_id, $campaign_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCampaign'][0])
    {
        list($response) = $this->serpClusterDeleteCampaignWithHttpInfo($customer_id, $campaign_id, $workspace_id, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterDeleteCampaignWithHttpInfo
     *
     * Serp Cluster Delete Campaign
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCampaign'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterDeleteCampaignWithHttpInfo($customer_id, $campaign_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCampaign'][0])
    {
        $request = $this->serpClusterDeleteCampaignRequest($customer_id, $campaign_id, $workspace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterDeleteCampaignAsync
     *
     * Serp Cluster Delete Campaign
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteCampaignAsync($customer_id, $campaign_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCampaign'][0])
    {
        return $this->serpClusterDeleteCampaignAsyncWithHttpInfo($customer_id, $campaign_id, $workspace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterDeleteCampaignAsyncWithHttpInfo
     *
     * Serp Cluster Delete Campaign
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteCampaignAsyncWithHttpInfo($customer_id, $campaign_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCampaign'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->serpClusterDeleteCampaignRequest($customer_id, $campaign_id, $workspace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterDeleteCampaign'
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterDeleteCampaignRequest($customer_id, $campaign_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCampaign'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling serpClusterDeleteCampaign'
            );
        }

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling serpClusterDeleteCampaign'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterDeleteCampaign'
            );
        }


        $resourcePath = '/v2/serp/clusters/{customer_id}/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterDeleteCustomer
     *
     * Serp Cluster Delete Customer
     *
     * @param  string $customer_id customer_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCustomer'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterDeleteCustomer($customer_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCustomer'][0])
    {
        list($response) = $this->serpClusterDeleteCustomerWithHttpInfo($customer_id, $workspace_id, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterDeleteCustomerWithHttpInfo
     *
     * Serp Cluster Delete Customer
     *
     * @param  string $customer_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCustomer'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterDeleteCustomerWithHttpInfo($customer_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCustomer'][0])
    {
        $request = $this->serpClusterDeleteCustomerRequest($customer_id, $workspace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterDeleteCustomerAsync
     *
     * Serp Cluster Delete Customer
     *
     * @param  string $customer_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteCustomerAsync($customer_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCustomer'][0])
    {
        return $this->serpClusterDeleteCustomerAsyncWithHttpInfo($customer_id, $workspace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterDeleteCustomerAsyncWithHttpInfo
     *
     * Serp Cluster Delete Customer
     *
     * @param  string $customer_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteCustomerAsyncWithHttpInfo($customer_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCustomer'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->serpClusterDeleteCustomerRequest($customer_id, $workspace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterDeleteCustomer'
     *
     * @param  string $customer_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterDeleteCustomerRequest($customer_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteCustomer'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling serpClusterDeleteCustomer'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterDeleteCustomer'
            );
        }


        $resourcePath = '/v2/serp/clusters/{customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterDeleteGroup
     *
     * Serp Cluster Delete Group
     *
     * @param  string $customer_id customer_id (required)
     * @param  string $campaign_id campaign_id (required)
     * @param  string $group_id group_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroup'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterDeleteGroup($customer_id, $campaign_id, $group_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteGroup'][0])
    {
        list($response) = $this->serpClusterDeleteGroupWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterDeleteGroupWithHttpInfo
     *
     * Serp Cluster Delete Group
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroup'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterDeleteGroupWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteGroup'][0])
    {
        $request = $this->serpClusterDeleteGroupRequest($customer_id, $campaign_id, $group_id, $workspace_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterDeleteGroupAsync
     *
     * Serp Cluster Delete Group
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteGroupAsync($customer_id, $campaign_id, $group_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteGroup'][0])
    {
        return $this->serpClusterDeleteGroupAsyncWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterDeleteGroupAsyncWithHttpInfo
     *
     * Serp Cluster Delete Group
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteGroupAsyncWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteGroup'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->serpClusterDeleteGroupRequest($customer_id, $campaign_id, $group_id, $workspace_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterDeleteGroup'
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterDeleteGroupRequest($customer_id, $campaign_id, $group_id, $workspace_id, string $contentType = self::contentTypes['serpClusterDeleteGroup'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling serpClusterDeleteGroup'
            );
        }

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling serpClusterDeleteGroup'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling serpClusterDeleteGroup'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterDeleteGroup'
            );
        }


        $resourcePath = '/v2/serp/clusters/{customer_id}/{campaign_id}/{group_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterDeleteGroupQueries
     *
     * Serp Cluster Delete Group Queries
     *
     * @param  string $customer_id customer_id (required)
     * @param  string $campaign_id campaign_id (required)
     * @param  string $group_id group_id (required)
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpQueryRequest $serp_query_request serp_query_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroupQueries'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterDeleteGroupQueries($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, string $contentType = self::contentTypes['serpClusterDeleteGroupQueries'][0])
    {
        list($response) = $this->serpClusterDeleteGroupQueriesWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterDeleteGroupQueriesWithHttpInfo
     *
     * Serp Cluster Delete Group Queries
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpQueryRequest $serp_query_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroupQueries'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\Completed|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterDeleteGroupQueriesWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, string $contentType = self::contentTypes['serpClusterDeleteGroupQueries'][0])
    {
        $request = $this->serpClusterDeleteGroupQueriesRequest($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\Completed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\Completed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\Completed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterDeleteGroupQueriesAsync
     *
     * Serp Cluster Delete Group Queries
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpQueryRequest $serp_query_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroupQueries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteGroupQueriesAsync($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, string $contentType = self::contentTypes['serpClusterDeleteGroupQueries'][0])
    {
        return $this->serpClusterDeleteGroupQueriesAsyncWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterDeleteGroupQueriesAsyncWithHttpInfo
     *
     * Serp Cluster Delete Group Queries
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpQueryRequest $serp_query_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroupQueries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterDeleteGroupQueriesAsyncWithHttpInfo($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, string $contentType = self::contentTypes['serpClusterDeleteGroupQueries'][0])
    {
        $returnType = '\FlowHunt\Model\Completed';
        $request = $this->serpClusterDeleteGroupQueriesRequest($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterDeleteGroupQueries'
     *
     * @param  string $customer_id (required)
     * @param  string $campaign_id (required)
     * @param  string $group_id (required)
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpQueryRequest $serp_query_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterDeleteGroupQueries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterDeleteGroupQueriesRequest($customer_id, $campaign_id, $group_id, $workspace_id, $serp_query_request, string $contentType = self::contentTypes['serpClusterDeleteGroupQueries'][0])
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling serpClusterDeleteGroupQueries'
            );
        }

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling serpClusterDeleteGroupQueries'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling serpClusterDeleteGroupQueries'
            );
        }

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterDeleteGroupQueries'
            );
        }

        // verify the required parameter 'serp_query_request' is set
        if ($serp_query_request === null || (is_array($serp_query_request) && count($serp_query_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_query_request when calling serpClusterDeleteGroupQueries'
            );
        }


        $resourcePath = '/v2/serp/clusters/{customer_id}/{campaign_id}/{group_id}/delete_queries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign_id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group_id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_query_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_query_request));
            } else {
                $httpBody = $serp_query_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterGetGraphNodes
     *
     * Serp Cluster Get Graph Nodes
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupIntersectionsRequest $serp_cluster_group_intersections_request serp_cluster_group_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetGraphNodes'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\SerpKeywordRelation[]|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterGetGraphNodes($workspace_id, $serp_cluster_group_intersections_request, string $contentType = self::contentTypes['serpClusterGetGraphNodes'][0])
    {
        list($response) = $this->serpClusterGetGraphNodesWithHttpInfo($workspace_id, $serp_cluster_group_intersections_request, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterGetGraphNodesWithHttpInfo
     *
     * Serp Cluster Get Graph Nodes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupIntersectionsRequest $serp_cluster_group_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetGraphNodes'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\SerpKeywordRelation[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterGetGraphNodesWithHttpInfo($workspace_id, $serp_cluster_group_intersections_request, string $contentType = self::contentTypes['serpClusterGetGraphNodes'][0])
    {
        $request = $this->serpClusterGetGraphNodesRequest($workspace_id, $serp_cluster_group_intersections_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\SerpKeywordRelation[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\SerpKeywordRelation[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\SerpKeywordRelation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterGetGraphNodesAsync
     *
     * Serp Cluster Get Graph Nodes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupIntersectionsRequest $serp_cluster_group_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetGraphNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterGetGraphNodesAsync($workspace_id, $serp_cluster_group_intersections_request, string $contentType = self::contentTypes['serpClusterGetGraphNodes'][0])
    {
        return $this->serpClusterGetGraphNodesAsyncWithHttpInfo($workspace_id, $serp_cluster_group_intersections_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterGetGraphNodesAsyncWithHttpInfo
     *
     * Serp Cluster Get Graph Nodes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupIntersectionsRequest $serp_cluster_group_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetGraphNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterGetGraphNodesAsyncWithHttpInfo($workspace_id, $serp_cluster_group_intersections_request, string $contentType = self::contentTypes['serpClusterGetGraphNodes'][0])
    {
        $returnType = '\FlowHunt\Model\SerpKeywordRelation[]';
        $request = $this->serpClusterGetGraphNodesRequest($workspace_id, $serp_cluster_group_intersections_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterGetGraphNodes'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupIntersectionsRequest $serp_cluster_group_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetGraphNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterGetGraphNodesRequest($workspace_id, $serp_cluster_group_intersections_request, string $contentType = self::contentTypes['serpClusterGetGraphNodes'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterGetGraphNodes'
            );
        }

        // verify the required parameter 'serp_cluster_group_intersections_request' is set
        if ($serp_cluster_group_intersections_request === null || (is_array($serp_cluster_group_intersections_request) && count($serp_cluster_group_intersections_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_cluster_group_intersections_request when calling serpClusterGetGraphNodes'
            );
        }


        $resourcePath = '/v2/serp/clusters/graph_nodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_cluster_group_intersections_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_cluster_group_intersections_request));
            } else {
                $httpBody = $serp_cluster_group_intersections_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterGetMatchingGroupsToQuery
     *
     * Serp Cluster Get Matching Groups To Query
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterBestGroupsRequest $serp_cluster_best_groups_request serp_cluster_best_groups_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetMatchingGroupsToQuery'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\SerpGroupIntersection[]|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterGetMatchingGroupsToQuery($workspace_id, $serp_cluster_best_groups_request, string $contentType = self::contentTypes['serpClusterGetMatchingGroupsToQuery'][0])
    {
        list($response) = $this->serpClusterGetMatchingGroupsToQueryWithHttpInfo($workspace_id, $serp_cluster_best_groups_request, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterGetMatchingGroupsToQueryWithHttpInfo
     *
     * Serp Cluster Get Matching Groups To Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterBestGroupsRequest $serp_cluster_best_groups_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetMatchingGroupsToQuery'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\SerpGroupIntersection[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterGetMatchingGroupsToQueryWithHttpInfo($workspace_id, $serp_cluster_best_groups_request, string $contentType = self::contentTypes['serpClusterGetMatchingGroupsToQuery'][0])
    {
        $request = $this->serpClusterGetMatchingGroupsToQueryRequest($workspace_id, $serp_cluster_best_groups_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\SerpGroupIntersection[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\SerpGroupIntersection[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\SerpGroupIntersection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterGetMatchingGroupsToQueryAsync
     *
     * Serp Cluster Get Matching Groups To Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterBestGroupsRequest $serp_cluster_best_groups_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetMatchingGroupsToQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterGetMatchingGroupsToQueryAsync($workspace_id, $serp_cluster_best_groups_request, string $contentType = self::contentTypes['serpClusterGetMatchingGroupsToQuery'][0])
    {
        return $this->serpClusterGetMatchingGroupsToQueryAsyncWithHttpInfo($workspace_id, $serp_cluster_best_groups_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterGetMatchingGroupsToQueryAsyncWithHttpInfo
     *
     * Serp Cluster Get Matching Groups To Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterBestGroupsRequest $serp_cluster_best_groups_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetMatchingGroupsToQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterGetMatchingGroupsToQueryAsyncWithHttpInfo($workspace_id, $serp_cluster_best_groups_request, string $contentType = self::contentTypes['serpClusterGetMatchingGroupsToQuery'][0])
    {
        $returnType = '\FlowHunt\Model\SerpGroupIntersection[]';
        $request = $this->serpClusterGetMatchingGroupsToQueryRequest($workspace_id, $serp_cluster_best_groups_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterGetMatchingGroupsToQuery'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterBestGroupsRequest $serp_cluster_best_groups_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetMatchingGroupsToQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterGetMatchingGroupsToQueryRequest($workspace_id, $serp_cluster_best_groups_request, string $contentType = self::contentTypes['serpClusterGetMatchingGroupsToQuery'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterGetMatchingGroupsToQuery'
            );
        }

        // verify the required parameter 'serp_cluster_best_groups_request' is set
        if ($serp_cluster_best_groups_request === null || (is_array($serp_cluster_best_groups_request) && count($serp_cluster_best_groups_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_cluster_best_groups_request when calling serpClusterGetMatchingGroupsToQuery'
            );
        }


        $resourcePath = '/v2/serp/clusters/recommended_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_cluster_best_groups_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_cluster_best_groups_request));
            } else {
                $httpBody = $serp_cluster_best_groups_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterGetRelatedKeywordsToQuery
     *
     * Serp Cluster Get Related Keywords To Query
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterKeywordIntersectionsRequest $serp_cluster_keyword_intersections_request serp_cluster_keyword_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetRelatedKeywordsToQuery'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\SerpKeywordRelation[]|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterGetRelatedKeywordsToQuery($workspace_id, $serp_cluster_keyword_intersections_request, string $contentType = self::contentTypes['serpClusterGetRelatedKeywordsToQuery'][0])
    {
        list($response) = $this->serpClusterGetRelatedKeywordsToQueryWithHttpInfo($workspace_id, $serp_cluster_keyword_intersections_request, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterGetRelatedKeywordsToQueryWithHttpInfo
     *
     * Serp Cluster Get Related Keywords To Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterKeywordIntersectionsRequest $serp_cluster_keyword_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetRelatedKeywordsToQuery'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\SerpKeywordRelation[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterGetRelatedKeywordsToQueryWithHttpInfo($workspace_id, $serp_cluster_keyword_intersections_request, string $contentType = self::contentTypes['serpClusterGetRelatedKeywordsToQuery'][0])
    {
        $request = $this->serpClusterGetRelatedKeywordsToQueryRequest($workspace_id, $serp_cluster_keyword_intersections_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\SerpKeywordRelation[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\SerpKeywordRelation[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\SerpKeywordRelation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterGetRelatedKeywordsToQueryAsync
     *
     * Serp Cluster Get Related Keywords To Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterKeywordIntersectionsRequest $serp_cluster_keyword_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetRelatedKeywordsToQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterGetRelatedKeywordsToQueryAsync($workspace_id, $serp_cluster_keyword_intersections_request, string $contentType = self::contentTypes['serpClusterGetRelatedKeywordsToQuery'][0])
    {
        return $this->serpClusterGetRelatedKeywordsToQueryAsyncWithHttpInfo($workspace_id, $serp_cluster_keyword_intersections_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterGetRelatedKeywordsToQueryAsyncWithHttpInfo
     *
     * Serp Cluster Get Related Keywords To Query
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterKeywordIntersectionsRequest $serp_cluster_keyword_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetRelatedKeywordsToQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterGetRelatedKeywordsToQueryAsyncWithHttpInfo($workspace_id, $serp_cluster_keyword_intersections_request, string $contentType = self::contentTypes['serpClusterGetRelatedKeywordsToQuery'][0])
    {
        $returnType = '\FlowHunt\Model\SerpKeywordRelation[]';
        $request = $this->serpClusterGetRelatedKeywordsToQueryRequest($workspace_id, $serp_cluster_keyword_intersections_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterGetRelatedKeywordsToQuery'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterKeywordIntersectionsRequest $serp_cluster_keyword_intersections_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterGetRelatedKeywordsToQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterGetRelatedKeywordsToQueryRequest($workspace_id, $serp_cluster_keyword_intersections_request, string $contentType = self::contentTypes['serpClusterGetRelatedKeywordsToQuery'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterGetRelatedKeywordsToQuery'
            );
        }

        // verify the required parameter 'serp_cluster_keyword_intersections_request' is set
        if ($serp_cluster_keyword_intersections_request === null || (is_array($serp_cluster_keyword_intersections_request) && count($serp_cluster_keyword_intersections_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_cluster_keyword_intersections_request when calling serpClusterGetRelatedKeywordsToQuery'
            );
        }


        $resourcePath = '/v2/serp/clusters/related_keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_cluster_keyword_intersections_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_cluster_keyword_intersections_request));
            } else {
                $httpBody = $serp_cluster_keyword_intersections_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpClusterSplitToSubClusters
     *
     * Serp Cluster Split To Sub Clusters
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSubClustersRequest $serp_cluster_group_sub_clusters_request serp_cluster_group_sub_clusters_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterSplitToSubClusters'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\SerpSubclusterKeywordsResponse[]|\FlowHunt\Model\HTTPValidationError
     */
    public function serpClusterSplitToSubClusters($workspace_id, $serp_cluster_group_sub_clusters_request, string $contentType = self::contentTypes['serpClusterSplitToSubClusters'][0])
    {
        list($response) = $this->serpClusterSplitToSubClustersWithHttpInfo($workspace_id, $serp_cluster_group_sub_clusters_request, $contentType);
        return $response;
    }

    /**
     * Operation serpClusterSplitToSubClustersWithHttpInfo
     *
     * Serp Cluster Split To Sub Clusters
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSubClustersRequest $serp_cluster_group_sub_clusters_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterSplitToSubClusters'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\SerpSubclusterKeywordsResponse[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpClusterSplitToSubClustersWithHttpInfo($workspace_id, $serp_cluster_group_sub_clusters_request, string $contentType = self::contentTypes['serpClusterSplitToSubClusters'][0])
    {
        $request = $this->serpClusterSplitToSubClustersRequest($workspace_id, $serp_cluster_group_sub_clusters_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\SerpSubclusterKeywordsResponse[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\SerpSubclusterKeywordsResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\SerpSubclusterKeywordsResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpClusterSplitToSubClustersAsync
     *
     * Serp Cluster Split To Sub Clusters
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSubClustersRequest $serp_cluster_group_sub_clusters_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterSplitToSubClusters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterSplitToSubClustersAsync($workspace_id, $serp_cluster_group_sub_clusters_request, string $contentType = self::contentTypes['serpClusterSplitToSubClusters'][0])
    {
        return $this->serpClusterSplitToSubClustersAsyncWithHttpInfo($workspace_id, $serp_cluster_group_sub_clusters_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpClusterSplitToSubClustersAsyncWithHttpInfo
     *
     * Serp Cluster Split To Sub Clusters
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSubClustersRequest $serp_cluster_group_sub_clusters_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterSplitToSubClusters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpClusterSplitToSubClustersAsyncWithHttpInfo($workspace_id, $serp_cluster_group_sub_clusters_request, string $contentType = self::contentTypes['serpClusterSplitToSubClusters'][0])
    {
        $returnType = '\FlowHunt\Model\SerpSubclusterKeywordsResponse[]';
        $request = $this->serpClusterSplitToSubClustersRequest($workspace_id, $serp_cluster_group_sub_clusters_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpClusterSplitToSubClusters'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpClusterGroupSubClustersRequest $serp_cluster_group_sub_clusters_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpClusterSplitToSubClusters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpClusterSplitToSubClustersRequest($workspace_id, $serp_cluster_group_sub_clusters_request, string $contentType = self::contentTypes['serpClusterSplitToSubClusters'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpClusterSplitToSubClusters'
            );
        }

        // verify the required parameter 'serp_cluster_group_sub_clusters_request' is set
        if ($serp_cluster_group_sub_clusters_request === null || (is_array($serp_cluster_group_sub_clusters_request) && count($serp_cluster_group_sub_clusters_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_cluster_group_sub_clusters_request when calling serpClusterSplitToSubClusters'
            );
        }


        $resourcePath = '/v2/serp/clusters/split_sub_clusters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_cluster_group_sub_clusters_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_cluster_group_sub_clusters_request));
            } else {
                $httpBody = $serp_cluster_group_sub_clusters_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpSearch
     *
     * Serp Search
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpSearchRequests $serp_search_requests serp_search_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpSearch'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\TaskResponse[]|\FlowHunt\Model\HTTPValidationError
     */
    public function serpSearch($workspace_id, $serp_search_requests, string $contentType = self::contentTypes['serpSearch'][0])
    {
        list($response) = $this->serpSearchWithHttpInfo($workspace_id, $serp_search_requests, $contentType);
        return $response;
    }

    /**
     * Operation serpSearchWithHttpInfo
     *
     * Serp Search
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpSearchRequests $serp_search_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpSearch'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\TaskResponse[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpSearchWithHttpInfo($workspace_id, $serp_search_requests, string $contentType = self::contentTypes['serpSearch'][0])
    {
        $request = $this->serpSearchRequest($workspace_id, $serp_search_requests, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\TaskResponse[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\TaskResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\TaskResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpSearchAsync
     *
     * Serp Search
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpSearchRequests $serp_search_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpSearchAsync($workspace_id, $serp_search_requests, string $contentType = self::contentTypes['serpSearch'][0])
    {
        return $this->serpSearchAsyncWithHttpInfo($workspace_id, $serp_search_requests, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpSearchAsyncWithHttpInfo
     *
     * Serp Search
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpSearchRequests $serp_search_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpSearchAsyncWithHttpInfo($workspace_id, $serp_search_requests, string $contentType = self::contentTypes['serpSearch'][0])
    {
        $returnType = '\FlowHunt\Model\TaskResponse[]';
        $request = $this->serpSearchRequest($workspace_id, $serp_search_requests, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpSearch'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpSearchRequests $serp_search_requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpSearchRequest($workspace_id, $serp_search_requests, string $contentType = self::contentTypes['serpSearch'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpSearch'
            );
        }

        // verify the required parameter 'serp_search_requests' is set
        if ($serp_search_requests === null || (is_array($serp_search_requests) && count($serp_search_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_search_requests when calling serpSearch'
            );
        }


        $resourcePath = '/v2/serp/serp/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_search_requests)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_search_requests));
            } else {
                $httpBody = $serp_search_requests;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpVolumes
     *
     * Serp Volumes
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\SerpVolumeRequest $serp_volume_request serp_volume_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumes'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\TaskResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function serpVolumes($workspace_id, $serp_volume_request, string $contentType = self::contentTypes['serpVolumes'][0])
    {
        list($response) = $this->serpVolumesWithHttpInfo($workspace_id, $serp_volume_request, $contentType);
        return $response;
    }

    /**
     * Operation serpVolumesWithHttpInfo
     *
     * Serp Volumes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpVolumeRequest $serp_volume_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumes'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\TaskResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpVolumesWithHttpInfo($workspace_id, $serp_volume_request, string $contentType = self::contentTypes['serpVolumes'][0])
    {
        $request = $this->serpVolumesRequest($workspace_id, $serp_volume_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\TaskResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\TaskResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\TaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpVolumesAsync
     *
     * Serp Volumes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpVolumeRequest $serp_volume_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpVolumesAsync($workspace_id, $serp_volume_request, string $contentType = self::contentTypes['serpVolumes'][0])
    {
        return $this->serpVolumesAsyncWithHttpInfo($workspace_id, $serp_volume_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpVolumesAsyncWithHttpInfo
     *
     * Serp Volumes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpVolumeRequest $serp_volume_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpVolumesAsyncWithHttpInfo($workspace_id, $serp_volume_request, string $contentType = self::contentTypes['serpVolumes'][0])
    {
        $returnType = '\FlowHunt\Model\TaskResponse';
        $request = $this->serpVolumesRequest($workspace_id, $serp_volume_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpVolumes'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\SerpVolumeRequest $serp_volume_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpVolumesRequest($workspace_id, $serp_volume_request, string $contentType = self::contentTypes['serpVolumes'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling serpVolumes'
            );
        }

        // verify the required parameter 'serp_volume_request' is set
        if ($serp_volume_request === null || (is_array($serp_volume_request) && count($serp_volume_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serp_volume_request when calling serpVolumes'
            );
        }


        $resourcePath = '/v2/serp/serp/volumes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($serp_volume_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($serp_volume_request));
            } else {
                $httpBody = $serp_volume_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Api-Key');
        if ($apiKey !== null) {
            $headers['Api-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serpVolumesPingback
     *
     * Serp Volumes Pingback
     *
     * @param  string $id id (required)
     * @param  string $tag tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumesPingback'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\TaskResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function serpVolumesPingback($id, $tag, string $contentType = self::contentTypes['serpVolumesPingback'][0])
    {
        list($response) = $this->serpVolumesPingbackWithHttpInfo($id, $tag, $contentType);
        return $response;
    }

    /**
     * Operation serpVolumesPingbackWithHttpInfo
     *
     * Serp Volumes Pingback
     *
     * @param  string $id (required)
     * @param  string $tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumesPingback'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\TaskResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function serpVolumesPingbackWithHttpInfo($id, $tag, string $contentType = self::contentTypes['serpVolumesPingback'][0])
    {
        $request = $this->serpVolumesPingbackRequest($id, $tag, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\TaskResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\TaskResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\TaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation serpVolumesPingbackAsync
     *
     * Serp Volumes Pingback
     *
     * @param  string $id (required)
     * @param  string $tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumesPingback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpVolumesPingbackAsync($id, $tag, string $contentType = self::contentTypes['serpVolumesPingback'][0])
    {
        return $this->serpVolumesPingbackAsyncWithHttpInfo($id, $tag, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serpVolumesPingbackAsyncWithHttpInfo
     *
     * Serp Volumes Pingback
     *
     * @param  string $id (required)
     * @param  string $tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumesPingback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serpVolumesPingbackAsyncWithHttpInfo($id, $tag, string $contentType = self::contentTypes['serpVolumesPingback'][0])
    {
        $returnType = '\FlowHunt\Model\TaskResponse';
        $request = $this->serpVolumesPingbackRequest($id, $tag, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serpVolumesPingback'
     *
     * @param  string $id (required)
     * @param  string $tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serpVolumesPingback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serpVolumesPingbackRequest($id, $tag, string $contentType = self::contentTypes['serpVolumesPingback'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serpVolumesPingback'
            );
        }

        // verify the required parameter 'tag' is set
        if ($tag === null || (is_array($tag) && count($tag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag when calling serpVolumesPingback'
            );
        }


        $resourcePath = '/v2/serp/serp/volumes/pingback/{id}/{tag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag !== null) {
            $resourcePath = str_replace(
                '{' . 'tag' . '}',
                ObjectSerializer::toPathValue($tag),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
