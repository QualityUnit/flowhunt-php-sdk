<?php
/**
 * FlowAssistantApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FlowHunt\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FlowHunt\ApiException;
use FlowHunt\Configuration;
use FlowHunt\FormDataProcessor;
use FlowHunt\HeaderSelector;
use FlowHunt\ObjectSerializer;

/**
 * FlowAssistantApi Class Doc Comment
 *
 * @category Class
 * @package  FlowHunt
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FlowAssistantApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'applyFlowAssistantChanges' => [
            'application/json',
        ],
        'createFlowAssistantSession' => [
            'application/json',
        ],
        'invokeFlowAssistantResponse' => [
            'application/json',
        ],
        'pollFlowAssistantResponse' => [
            'application/json',
        ],
        'rejectFlowAssistantChanges' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation applyFlowAssistantChanges
     *
     * Apply Flow Assistant Changes
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\FlowDetailResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function applyFlowAssistantChanges($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['applyFlowAssistantChanges'][0])
    {
        list($response) = $this->applyFlowAssistantChangesWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType);
        return $response;
    }

    /**
     * Operation applyFlowAssistantChangesWithHttpInfo
     *
     * Apply Flow Assistant Changes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\FlowDetailResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyFlowAssistantChangesWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['applyFlowAssistantChanges'][0])
    {
        $request = $this->applyFlowAssistantChangesRequest($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\FlowDetailResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\FlowDetailResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\FlowDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation applyFlowAssistantChangesAsync
     *
     * Apply Flow Assistant Changes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyFlowAssistantChangesAsync($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['applyFlowAssistantChanges'][0])
    {
        return $this->applyFlowAssistantChangesAsyncWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyFlowAssistantChangesAsyncWithHttpInfo
     *
     * Apply Flow Assistant Changes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyFlowAssistantChangesAsyncWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['applyFlowAssistantChanges'][0])
    {
        $returnType = '\FlowHunt\Model\FlowDetailResponse';
        $request = $this->applyFlowAssistantChangesRequest($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyFlowAssistantChanges'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyFlowAssistantChangesRequest($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['applyFlowAssistantChanges'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling applyFlowAssistantChanges'
            );
        }

        // verify the required parameter 'flow_assistant_apply_reject_changes_request' is set
        if ($flow_assistant_apply_reject_changes_request === null || (is_array($flow_assistant_apply_reject_changes_request) && count($flow_assistant_apply_reject_changes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_assistant_apply_reject_changes_request when calling applyFlowAssistantChanges'
            );
        }


        $resourcePath = '/v2/flow_assistants/apply_changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($flow_assistant_apply_reject_changes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($flow_assistant_apply_reject_changes_request));
            } else {
                $httpBody = $flow_assistant_apply_reject_changes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFlowAssistantSession
     *
     * Create Flow Assistant Session
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantSessionCreateRequest $flow_assistant_session_create_request flow_assistant_session_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFlowAssistantSession'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\FlowSessionResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function createFlowAssistantSession($workspace_id, $flow_assistant_session_create_request, string $contentType = self::contentTypes['createFlowAssistantSession'][0])
    {
        list($response) = $this->createFlowAssistantSessionWithHttpInfo($workspace_id, $flow_assistant_session_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createFlowAssistantSessionWithHttpInfo
     *
     * Create Flow Assistant Session
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantSessionCreateRequest $flow_assistant_session_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFlowAssistantSession'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\FlowSessionResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFlowAssistantSessionWithHttpInfo($workspace_id, $flow_assistant_session_create_request, string $contentType = self::contentTypes['createFlowAssistantSession'][0])
    {
        $request = $this->createFlowAssistantSessionRequest($workspace_id, $flow_assistant_session_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\FlowSessionResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\FlowSessionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\FlowSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createFlowAssistantSessionAsync
     *
     * Create Flow Assistant Session
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantSessionCreateRequest $flow_assistant_session_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFlowAssistantSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFlowAssistantSessionAsync($workspace_id, $flow_assistant_session_create_request, string $contentType = self::contentTypes['createFlowAssistantSession'][0])
    {
        return $this->createFlowAssistantSessionAsyncWithHttpInfo($workspace_id, $flow_assistant_session_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFlowAssistantSessionAsyncWithHttpInfo
     *
     * Create Flow Assistant Session
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantSessionCreateRequest $flow_assistant_session_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFlowAssistantSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFlowAssistantSessionAsyncWithHttpInfo($workspace_id, $flow_assistant_session_create_request, string $contentType = self::contentTypes['createFlowAssistantSession'][0])
    {
        $returnType = '\FlowHunt\Model\FlowSessionResponse';
        $request = $this->createFlowAssistantSessionRequest($workspace_id, $flow_assistant_session_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFlowAssistantSession'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantSessionCreateRequest $flow_assistant_session_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFlowAssistantSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFlowAssistantSessionRequest($workspace_id, $flow_assistant_session_create_request, string $contentType = self::contentTypes['createFlowAssistantSession'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling createFlowAssistantSession'
            );
        }

        // verify the required parameter 'flow_assistant_session_create_request' is set
        if ($flow_assistant_session_create_request === null || (is_array($flow_assistant_session_create_request) && count($flow_assistant_session_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_assistant_session_create_request when calling createFlowAssistantSession'
            );
        }


        $resourcePath = '/v2/flow_assistants/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($flow_assistant_session_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($flow_assistant_session_create_request));
            } else {
                $httpBody = $flow_assistant_session_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invokeFlowAssistantResponse
     *
     * Invoke Flow Assistant Response
     *
     * @param  string $session_id session_id (required)
     * @param  \FlowHunt\Model\FlowAssistantInvokeRequest $flow_assistant_invoke_request flow_assistant_invoke_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invokeFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\FlowSessionInvocationResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function invokeFlowAssistantResponse($session_id, $flow_assistant_invoke_request, string $contentType = self::contentTypes['invokeFlowAssistantResponse'][0])
    {
        list($response) = $this->invokeFlowAssistantResponseWithHttpInfo($session_id, $flow_assistant_invoke_request, $contentType);
        return $response;
    }

    /**
     * Operation invokeFlowAssistantResponseWithHttpInfo
     *
     * Invoke Flow Assistant Response
     *
     * @param  string $session_id (required)
     * @param  \FlowHunt\Model\FlowAssistantInvokeRequest $flow_assistant_invoke_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invokeFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\FlowSessionInvocationResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function invokeFlowAssistantResponseWithHttpInfo($session_id, $flow_assistant_invoke_request, string $contentType = self::contentTypes['invokeFlowAssistantResponse'][0])
    {
        $request = $this->invokeFlowAssistantResponseRequest($session_id, $flow_assistant_invoke_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\FlowSessionInvocationResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\FlowSessionInvocationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\FlowSessionInvocationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invokeFlowAssistantResponseAsync
     *
     * Invoke Flow Assistant Response
     *
     * @param  string $session_id (required)
     * @param  \FlowHunt\Model\FlowAssistantInvokeRequest $flow_assistant_invoke_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invokeFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invokeFlowAssistantResponseAsync($session_id, $flow_assistant_invoke_request, string $contentType = self::contentTypes['invokeFlowAssistantResponse'][0])
    {
        return $this->invokeFlowAssistantResponseAsyncWithHttpInfo($session_id, $flow_assistant_invoke_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invokeFlowAssistantResponseAsyncWithHttpInfo
     *
     * Invoke Flow Assistant Response
     *
     * @param  string $session_id (required)
     * @param  \FlowHunt\Model\FlowAssistantInvokeRequest $flow_assistant_invoke_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invokeFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invokeFlowAssistantResponseAsyncWithHttpInfo($session_id, $flow_assistant_invoke_request, string $contentType = self::contentTypes['invokeFlowAssistantResponse'][0])
    {
        $returnType = '\FlowHunt\Model\FlowSessionInvocationResponse';
        $request = $this->invokeFlowAssistantResponseRequest($session_id, $flow_assistant_invoke_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invokeFlowAssistantResponse'
     *
     * @param  string $session_id (required)
     * @param  \FlowHunt\Model\FlowAssistantInvokeRequest $flow_assistant_invoke_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invokeFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invokeFlowAssistantResponseRequest($session_id, $flow_assistant_invoke_request, string $contentType = self::contentTypes['invokeFlowAssistantResponse'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling invokeFlowAssistantResponse'
            );
        }

        // verify the required parameter 'flow_assistant_invoke_request' is set
        if ($flow_assistant_invoke_request === null || (is_array($flow_assistant_invoke_request) && count($flow_assistant_invoke_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_assistant_invoke_request when calling invokeFlowAssistantResponse'
            );
        }


        $resourcePath = '/v2/flow_assistants/{session_id}/invoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'session_id' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($flow_assistant_invoke_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($flow_assistant_invoke_request));
            } else {
                $httpBody = $flow_assistant_invoke_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pollFlowAssistantResponse
     *
     * Poll Flow Assistant Response
     *
     * @param  string $session_id session_id (required)
     * @param  string $from_timestamp from_timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pollFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\FlowSessionEvent[]|\FlowHunt\Model\HTTPValidationError
     */
    public function pollFlowAssistantResponse($session_id, $from_timestamp, string $contentType = self::contentTypes['pollFlowAssistantResponse'][0])
    {
        list($response) = $this->pollFlowAssistantResponseWithHttpInfo($session_id, $from_timestamp, $contentType);
        return $response;
    }

    /**
     * Operation pollFlowAssistantResponseWithHttpInfo
     *
     * Poll Flow Assistant Response
     *
     * @param  string $session_id (required)
     * @param  string $from_timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pollFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\FlowSessionEvent[]|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function pollFlowAssistantResponseWithHttpInfo($session_id, $from_timestamp, string $contentType = self::contentTypes['pollFlowAssistantResponse'][0])
    {
        $request = $this->pollFlowAssistantResponseRequest($session_id, $from_timestamp, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\FlowSessionEvent[]',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\FlowSessionEvent[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\FlowSessionEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pollFlowAssistantResponseAsync
     *
     * Poll Flow Assistant Response
     *
     * @param  string $session_id (required)
     * @param  string $from_timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pollFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pollFlowAssistantResponseAsync($session_id, $from_timestamp, string $contentType = self::contentTypes['pollFlowAssistantResponse'][0])
    {
        return $this->pollFlowAssistantResponseAsyncWithHttpInfo($session_id, $from_timestamp, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pollFlowAssistantResponseAsyncWithHttpInfo
     *
     * Poll Flow Assistant Response
     *
     * @param  string $session_id (required)
     * @param  string $from_timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pollFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pollFlowAssistantResponseAsyncWithHttpInfo($session_id, $from_timestamp, string $contentType = self::contentTypes['pollFlowAssistantResponse'][0])
    {
        $returnType = '\FlowHunt\Model\FlowSessionEvent[]';
        $request = $this->pollFlowAssistantResponseRequest($session_id, $from_timestamp, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pollFlowAssistantResponse'
     *
     * @param  string $session_id (required)
     * @param  string $from_timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pollFlowAssistantResponse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pollFlowAssistantResponseRequest($session_id, $from_timestamp, string $contentType = self::contentTypes['pollFlowAssistantResponse'][0])
    {

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling pollFlowAssistantResponse'
            );
        }

        // verify the required parameter 'from_timestamp' is set
        if ($from_timestamp === null || (is_array($from_timestamp) && count($from_timestamp) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_timestamp when calling pollFlowAssistantResponse'
            );
        }


        $resourcePath = '/v2/flow_assistants/{session_id}/invocation_response/{from_timestamp}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'session_id' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }
        // path params
        if ($from_timestamp !== null) {
            $resourcePath = str_replace(
                '{' . 'from_timestamp' . '}',
                ObjectSerializer::toPathValue($from_timestamp),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectFlowAssistantChanges
     *
     * Reject Flow Assistant Changes
     *
     * @param  string $workspace_id workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FlowHunt\Model\FlowDetailResponse|\FlowHunt\Model\HTTPValidationError
     */
    public function rejectFlowAssistantChanges($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['rejectFlowAssistantChanges'][0])
    {
        list($response) = $this->rejectFlowAssistantChangesWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType);
        return $response;
    }

    /**
     * Operation rejectFlowAssistantChangesWithHttpInfo
     *
     * Reject Flow Assistant Changes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \FlowHunt\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FlowHunt\Model\FlowDetailResponse|\FlowHunt\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectFlowAssistantChangesWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['rejectFlowAssistantChanges'][0])
    {
        $request = $this->rejectFlowAssistantChangesRequest($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\FlowDetailResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\FlowHunt\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FlowHunt\Model\FlowDetailResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\FlowDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FlowHunt\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation rejectFlowAssistantChangesAsync
     *
     * Reject Flow Assistant Changes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectFlowAssistantChangesAsync($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['rejectFlowAssistantChanges'][0])
    {
        return $this->rejectFlowAssistantChangesAsyncWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectFlowAssistantChangesAsyncWithHttpInfo
     *
     * Reject Flow Assistant Changes
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectFlowAssistantChangesAsyncWithHttpInfo($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['rejectFlowAssistantChanges'][0])
    {
        $returnType = '\FlowHunt\Model\FlowDetailResponse';
        $request = $this->rejectFlowAssistantChangesRequest($workspace_id, $flow_assistant_apply_reject_changes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectFlowAssistantChanges'
     *
     * @param  string $workspace_id (required)
     * @param  \FlowHunt\Model\FlowAssistantApplyRejectChangesRequest $flow_assistant_apply_reject_changes_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectFlowAssistantChanges'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectFlowAssistantChangesRequest($workspace_id, $flow_assistant_apply_reject_changes_request, string $contentType = self::contentTypes['rejectFlowAssistantChanges'][0])
    {

        // verify the required parameter 'workspace_id' is set
        if ($workspace_id === null || (is_array($workspace_id) && count($workspace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspace_id when calling rejectFlowAssistantChanges'
            );
        }

        // verify the required parameter 'flow_assistant_apply_reject_changes_request' is set
        if ($flow_assistant_apply_reject_changes_request === null || (is_array($flow_assistant_apply_reject_changes_request) && count($flow_assistant_apply_reject_changes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_assistant_apply_reject_changes_request when calling rejectFlowAssistantChanges'
            );
        }


        $resourcePath = '/v2/flow_assistants/reject_changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $workspace_id,
            'workspace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($flow_assistant_apply_reject_changes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($flow_assistant_apply_reject_changes_request));
            } else {
                $httpBody = $flow_assistant_apply_reject_changes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
